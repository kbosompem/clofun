{"version":3,"sources":["sci/lang.cljc"],"mappings":"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AA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,+BAAA,WAAAW,OAAAE,jDAGIE;;AAHJ,AAAA,IAAAJ,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAG,iBAAAD;;;AAAA,CAAA,AAAA,uDAAA,vDAGIE;;AAHJ,AAAA,YAAA,RA4GkCnB;AA5GlC,AA6GI,IAAAwD,eAAA,AAAAC,gBAAEzD;AAAF,AAAA,QAAAwD,6CAAAA,+CAAAA;;;AA7GJ,CAAA,AAAA,uDAAA,vDAGIrC,kEA2GmCiC;;AA9GvC,AAAA,YAAA,RA8GkCpD;AA9GlC,AA+GI,IAAA0D,eAAA,AAAAD,gBAAEzD;AAAF,AAAA,QAAA0D,6CAAAA,gDAAAA,LAAON,4BAAAA;;;AA/GX,CAAA,AAAA,uDAAA,vDAGIjC,kEA6GmCiC,EAAEL;;AAhHzC,AAAA,YAAA,RAgHkC/C;AAhHlC,AAiHI,IAAA2D,eAAA,AAAAF,gBAAEzD;AAAF,AAAA,QAAA2D,6CAAAA,kDAAAA,PAAOP,8BAAAA,5BAAEL,8BAAAA;;;AAjHb,CAAA,AAAA,uDAAA,vDAGI5B,kEA+GmCiC,EAAEL,EAAEa;;AAlH3C,AAAA,YAAA,RAkHkC5D;AAlHlC,AAmHI,IAAA6D,eAAA,AAAAJ,gBAAEzD;AAAF,AAAA,QAAA6D,6CAAAA,oDAAAA,TAAOT,gCAAAA,9BAAEL,gCAAAA,9BAAEa,gCAAAA;;;AAnHf,CAAA,AAAA,uDAAA,vDAGIzC,kEAiHmCiC,EAAEL,EAAEa,EAAEE;;AApH7C,AAAA,YAAA,RAoHkC9D;AApHlC,AAqHI,IAAA+D,eAAA,AAAAN,gBAAEzD;AAAF,AAAA,QAAA+D,6CAAAA,sDAAAA,XAAOX,kCAAAA,hCAAEL,kCAAAA,hCAAEa,kCAAAA,hCAAEE,kCAAAA;;;AArHjB,CAAA,AAAA,uDAAA,vDAGI3C,kEAmHmCiC,EAAEL,EAAEa,EAAEE,EAAEE;;AAtH/C,AAAA,YAAA,RAsHkChE;AAtHlC,AAuHI,IAAAiE,eAAA,AAAAR,gBAAEzD;AAAF,AAAA,QAAAiE,6CAAAA,wDAAAA,bAAOb,oCAAAA,lCAAEL,oCAAAA,lCAAEa,oCAAAA,lCAAEE,oCAAAA,lCAAEE,oCAAAA;;;AAvHnB,CAAA,AAAA,uDAAA,vDAGI7C,kEAqHmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD;;AAxHjD,AAAA,YAAA,RAwHkCb;AAxHlC,AAyHI,IAAAkE,eAAA,AAAAT,gBAAEzD;AAAF,AAAA,QAAAkE,6CAAAA,0DAAAA,fAAOd,sCAAAA,pCAAEL,sCAAAA,pCAAEa,sCAAAA,pCAAEE,sCAAAA,pCAAEE,sCAAAA,pCAAEnD,sCAAAA;;;AAzHrB,CAAA,AAAA,uDAAA,vDAGIM,kEAuHmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD;;AA1HnD,AAAA,YAAA,RA0HkCnE;AA1HlC,AA2HI,IAAAoE,eAAA,AAAAX,gBAAEzD;AAAF,AAAA,QAAAoE,6CAAAA,4DAAAA,jBAAOhB,wCAAAA,tCAAEL,wCAAAA,tCAAEa,wCAAAA,tCAAEE,wCAAAA,tCAAEE,wCAAAA,tCAAEnD,wCAAAA,tCAAEsD,wCAAAA;;;AA3HvB,CAAA,AAAA,uDAAA,vDAGIhD,kEAyHmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE;;AA5HrD,AAAA,YAAA,RA4HkCrE;AA5HlC,AA6HI,IAAAsE,eAAA,AAAAb,gBAAEzD;AAAF,AAAA,QAAAsE,6CAAAA,8DAAAA,nBAAOlB,0CAAAA,xCAAEL,0CAAAA,xCAAEa,0CAAAA,xCAAEE,0CAAAA,xCAAEE,0CAAAA,xCAAEnD,0CAAAA,xCAAEsD,0CAAAA,xCAAEE,0CAAAA;;;AA7HzB,CAAA,AAAA,uDAAA,vDAGIlD,kEA2HmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF;;AA9HvD,AAAA,YAAA,RA8HkCgB;AA9HlC,AA+HI,IAAAuE,eAAA,AAAAd,gBAAEzD;AAAF,AAAA,QAAAuE,6CAAAA,gEAAAA,rBAAOnB,4CAAAA,1CAAEL,4CAAAA,1CAAEa,4CAAAA,1CAAEE,4CAAAA,1CAAEE,4CAAAA,1CAAEnD,4CAAAA,1CAAEsD,4CAAAA,1CAAEE,4CAAAA,1CAAErF,4CAAAA;;;AA/H3B,CAAA,AAAA,wDAAA,xDAGImC,mEA6HmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF;;AAhIzD,AAAA,YAAA,RAgIkCxE;AAhIlC,AAiII,IAAAyE,eAAA,AAAAhB,gBAAEzD;AAAF,AAAA,QAAAyE,8CAAAA,mEAAAA,vBAAOrB,8CAAAA,5CAAEL,8CAAAA,5CAAEa,8CAAAA,5CAAEE,8CAAAA,5CAAEE,8CAAAA,5CAAEnD,8CAAAA,5CAAEsD,8CAAAA,5CAAEE,8CAAAA,5CAAErF,8CAAAA,5CAAEwF,8CAAAA;;;AAjI7B,CAAA,AAAA,wDAAA,xDAGIrD,mEA+HmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D;;AAlI3D,AAAA,YAAA,RAkIkCZ;AAlIlC,AAmII,IAAA0E,eAAA,AAAAjB,gBAAEzD;AAAF,AAAA,QAAA0E,8CAAAA,qEAAAA,zBAAOtB,gDAAAA,9CAAEL,gDAAAA,9CAAEa,gDAAAA,9CAAEE,gDAAAA,9CAAEE,gDAAAA,9CAAEnD,gDAAAA,9CAAEsD,gDAAAA,9CAAEE,gDAAAA,9CAAErF,gDAAAA,9CAAEwF,gDAAAA,9CAAE5D,gDAAAA;;;AAnI/B,CAAA,AAAA,wDAAA,xDAGIO,mEAiImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D;;AApI7D,AAAA,YAAA,RAoIkC3E;AApIlC,AAqII,IAAA4E,eAAA,AAAAnB,gBAAEzD;AAAF,AAAA,QAAA4E,8CAAAA,uEAAAA,3BAAOxB,kDAAAA,hDAAEL,kDAAAA,hDAAEa,kDAAAA,hDAAEE,kDAAAA,hDAAEE,kDAAAA,hDAAEnD,kDAAAA,hDAAEsD,kDAAAA,hDAAEE,kDAAAA,hDAAErF,kDAAAA,hDAAEwF,kDAAAA,hDAAE5D,kDAAAA,hDAAE+D,kDAAAA;;;AArIjC,CAAA,AAAA,wDAAA,xDAGIxD,mEAmImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B;;AAtI/D,AAAA,YAAA,RAsIkC5C;AAtIlC,AAuII,IAAA6E,eAAA,AAAApB,gBAAEzD;AAAF,AAAA,QAAA6E,8CAAAA,yEAAAA,7BAAOzB,oDAAAA,lDAAEL,oDAAAA,lDAAEa,oDAAAA,lDAAEE,oDAAAA,lDAAEE,oDAAAA,lDAAEnD,oDAAAA,lDAAEsD,oDAAAA,lDAAEE,oDAAAA,lDAAErF,oDAAAA,lDAAEwF,oDAAAA,lDAAE5D,oDAAAA,lDAAE+D,oDAAAA,lDAAE/B,oDAAAA;;;AAvInC,CAAA,AAAA,wDAAA,xDAGIzB,mEAqImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC;;AAxIjE,AAAA,YAAA,RAwIkC9E;AAxIlC,AAyII,IAAA+E,eAAA,AAAAtB,gBAAEzD;AAAF,AAAA,QAAA+E,8CAAAA,2EAAAA,/BAAO3B,sDAAAA,pDAAEL,sDAAAA,pDAAEa,sDAAAA,pDAAEE,sDAAAA,pDAAEE,sDAAAA,pDAAEnD,sDAAAA,pDAAEsD,sDAAAA,pDAAEE,sDAAAA,pDAAErF,sDAAAA,pDAAEwF,sDAAAA,pDAAE5D,sDAAAA,pDAAE+D,sDAAAA,pDAAE/B,sDAAAA,pDAAEkC,sDAAAA;;;AAzIrC,CAAA,AAAA,wDAAA,xDAGI3D,mEAuImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE;;AA1InE,AAAA,YAAA,RA0IkChF;AA1IlC,AA2II,IAAAiF,eAAA,AAAAxB,gBAAEzD;AAAF,AAAA,QAAAiF,8CAAAA,6EAAAA,jCAAO7B,wDAAAA,tDAAEL,wDAAAA,tDAAEa,wDAAAA,tDAAEE,wDAAAA,tDAAEE,wDAAAA,tDAAEnD,wDAAAA,tDAAEsD,wDAAAA,tDAAEE,wDAAAA,tDAAErF,wDAAAA,tDAAEwF,wDAAAA,tDAAE5D,wDAAAA,tDAAE+D,wDAAAA,tDAAE/B,wDAAAA,tDAAEkC,wDAAAA,tDAAEE,wDAAAA;;;AA3IvC,CAAA,AAAA,wDAAA,xDAGI7D,mEAyImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE;;AA5IrE,AAAA,YAAA,RA4IkClF;AA5IlC,AA6II,IAAAmF,eAAA,AAAA1B,gBAAEzD;AAAF,AAAA,QAAAmF,8CAAAA,+EAAAA,nCAAO/B,0DAAAA,xDAAEL,0DAAAA,xDAAEa,0DAAAA,xDAAEE,0DAAAA,xDAAEE,0DAAAA,xDAAEnD,0DAAAA,xDAAEsD,0DAAAA,xDAAEE,0DAAAA,xDAAErF,0DAAAA,xDAAEwF,0DAAAA,xDAAE5D,0DAAAA,xDAAE+D,0DAAAA,xDAAE/B,0DAAAA,xDAAEkC,0DAAAA,xDAAEE,0DAAAA,xDAAEE,0DAAAA;;;AA7IzC,CAAA,AAAA,wDAAA,xDAGI/D,mEA2ImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE;;AA9IvE,AAAA,YAAA,RA8IkCpF;AA9IlC,AA+II,IAAAqF,eAAA,AAAA5B,gBAAEzD;AAAF,AAAA,QAAAqF,8CAAAA,iFAAAA,rCAAOjC,4DAAAA,1DAAEL,4DAAAA,1DAAEa,4DAAAA,1DAAEE,4DAAAA,1DAAEE,4DAAAA,1DAAEnD,4DAAAA,1DAAEsD,4DAAAA,1DAAEE,4DAAAA,1DAAErF,4DAAAA,1DAAEwF,4DAAAA,1DAAE5D,4DAAAA,1DAAE+D,4DAAAA,1DAAE/B,4DAAAA,1DAAEkC,4DAAAA,1DAAEE,4DAAAA,1DAAEE,4DAAAA,1DAAEE,4DAAAA;;;AA/I3C,CAAA,AAAA,wDAAA,xDAGIjE,mEA6ImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE,EAAEE;;AAhJzE,AAAA,YAAA,RAgJkCtF;AAhJlC,AAiJI,IAAAuF,eAAA,AAAA9B,gBAAEzD;AAAF,AAAA,QAAAuF,8CAAAA,mFAAAA,vCAAOnC,8DAAAA,5DAAEL,8DAAAA,5DAAEa,8DAAAA,5DAAEE,8DAAAA,5DAAEE,8DAAAA,5DAAEnD,8DAAAA,5DAAEsD,8DAAAA,5DAAEE,8DAAAA,5DAAErF,8DAAAA,5DAAEwF,8DAAAA,5DAAE5D,8DAAAA,5DAAE+D,8DAAAA,5DAAE/B,8DAAAA,5DAAEkC,8DAAAA,5DAAEE,8DAAAA,5DAAEE,8DAAAA,5DAAEE,8DAAAA,5DAAEE,8DAAAA;;;AAjJ7C,CAAA,AAAA,wDAAA,xDAGInE,mEA+ImCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE,EAAEE,EAAExG;;AAlJ3E,AAAA,YAAA,RAkJkCkB;AAlJlC,AAmJI,IAAAwF,eAAA,AAAA/B,gBAAEzD;AAAF,AAAA,QAAAwF,8CAAAA,qFAAAA,zCAAOpC,gEAAAA,9DAAEL,gEAAAA,9DAAEa,gEAAAA,9DAAEE,gEAAAA,9DAAEE,gEAAAA,9DAAEnD,gEAAAA,9DAAEsD,gEAAAA,9DAAEE,gEAAAA,9DAAErF,gEAAAA,9DAAEwF,gEAAAA,9DAAE5D,gEAAAA,9DAAE+D,gEAAAA,9DAAE/B,gEAAAA,9DAAEkC,gEAAAA,9DAAEE,gEAAAA,9DAAEE,gEAAAA,9DAAEE,gEAAAA,9DAAEE,gEAAAA,9DAAExG,gEAAAA;;;AAnJ/C,CAAA,AAAA,wDAAA,xDAGIqC,mEAiJmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE,EAAEE,EAAExG,EAAE2G;;AApJ7E,AAAA,YAAA,RAoJkCzF;AApJlC,AAqJI,IAAA0F,eAAA,AAAAjC,gBAAEzD;AAAF,AAAA,QAAA0F,8CAAAA,uFAAAA,3CAAOtC,kEAAAA,hEAAEL,kEAAAA,hEAAEa,kEAAAA,hEAAEE,kEAAAA,hEAAEE,kEAAAA,hEAAEnD,kEAAAA,hEAAEsD,kEAAAA,hEAAEE,kEAAAA,hEAAErF,kEAAAA,hEAAEwF,kEAAAA,hEAAE5D,kEAAAA,hEAAE+D,kEAAAA,hEAAE/B,kEAAAA,hEAAEkC,kEAAAA,hEAAEE,kEAAAA,hEAAEE,kEAAAA,hEAAEE,kEAAAA,hEAAEE,kEAAAA,hEAAExG,kEAAAA,hEAAE2G,kEAAAA;;;AArJjD,CAAA,AAAA,wDAAA,xDAGItE,mEAmJmCiC,EAAEL,EAAEa,EAAEE,EAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE,EAAEE,EAAExG,EAAE2G,EAAEE;;AAtJ/E,AAAA,YAAA,RAsJkC3F;AAtJlC,AAuJI,4DAAA,AAAAyD,rDAACmC,qEAAO5F,OAAKoD,EAAEL,EAAEa,EAAEE,oDAAEE,EAAEnD,EAAEsD,EAAEE,EAAErF,EAAEwF,EAAE5D,EAAE+D,EAAE/B,EAAEkC,EAAEE,EAAEE,EAAEE,EAAEE,EAAExG,EAAE2G,EAAEE;;;AAvJzD,CAAA,AAAA,yDAAA,zDAGIxE,oEAgEiBnB;;AAnErB,AAAA,gBAAA,ZAmEqBA;AAnErB,AAoEI,oBAAIwB;AACF,IAAAzC,qBAAc,AAACiE,iCAAwBhD;AAAvC,AAAA,oBAAAjB;AAAA,WAAAA,PAASmE;AAAT,AACE,OAACC,sBAAaD;;AACd7B;;;AACFA;;;;AAxEN,CAAA,wBAAA,xBAGIF;AAHJ,AAAA,AAAA;;;AAAA,CAAA,8BAAA,9BAGIA;;AAHJ,CAAA,iCAAA,jCAGIA;;AAHJ,CAAA,sCAAA,WAAA9B,mBAAAC,qBAAAC,zFAGI4B;AAHJ,AAAA,OAAA3B,iBAAAF,qBAAA;;;AAAA;;;oBAAA,pBAGI8B,gDACwBC,KACnBC,IAEmBC,KAEAC,aAEAC,UAEAlB;AAb5B,AAAA,YAAAY,aAI4BE,KACnBC,IAEmBC,KAEAC,aAEAC,UAEAlB;;;AAVxBY,AAkKJ,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,wCAAA,xCAKI0E;;AALJ,AAAA,QAAA,JAQa/F;AARb,AASI,mDAAKD;;;AATT,CAAA,AAAA,uDAAAT,vDAKIyG;;AALJ,CAAA,AAAA,sEAAA,tEAKIA,iFAMQ/F;;AAXZ,AAAA,YAAA,RAWYA;AAXZ,AAWeD;;;AAXf,CAAA,AAAA,6DAAA,7DAKIgG,wEAQiD/F;;AAbrD,AAAA,YAAA,RAaqDA;AAbrD,AAawDyB;;;AAbxD,CAAA,8BAAA,9BAKIsE;AALJ,AAAA,AAAA;;;AAAA,CAAA,oCAAA,pCAKIA;;AALJ,CAAA,uCAAA,vCAKIA;;AALJ,CAAA,4CAAA,WAAAxG,mBAAAC,qBAAAC,/FAKIsG;AALJ,AAAA,OAAArG,iBAAAF,qBAAA;;;AAAA;;;0BAAA,1BAKIwG,4DAAWjG,KACwB0B;AANvC,AAAA,YAAAsE,mBAKehG,KACwB0B;;;AADnCsE","names":["sci.lang/class-name","s","temp__5802__auto__","i","clojure.string.last_index_of","cljs.core.subs","sci.lang/package-name","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","sci.lang/Type","sci.lang/->Type","data","namespace","name","_","v","this","ns","nom","sci.lang/throw-root-binding","js/Error","sci.lang/notify-watches","ref","watches","old-val","new-val","cljs.core/count","cljs.core/reduce-kv","k","f","unused__11785__auto__","self__","G__39092","args39085","cljs.core/aclone","sci.lang/Var","sci.lang/->Var","root","sym","meta","thread-bound","needs-ctx","_this","or__5045__auto__","old-root","vm__38955__auto__","sci.impl.unrestrict/*unrestricted*","cljs.core/not","the-var__38956__auto__","ns__38957__auto__","ns-name__38958__auto__","sci.impl.types/getName","name__38959__auto__","cljs.core.ex_info","sym-name","G__39090","cljs.core/name","cljs.core.symbol","G__39091","temp__5808__auto__","m","cljs.core/meta","sci.impl.vars/SciUnbound","b","sci.impl.vars/get-thread-binding","sci.impl.types/setVal","tbox","sci.impl.types/getVal","a","writer","opts","cljs.core/-pr-writer","fexpr__39093","cljs.core/deref","fexpr__39094","fexpr__39095","c","fexpr__39096","d","fexpr__39097","e","fexpr__39098","fexpr__39099","g","fexpr__39100","h","fexpr__39101","fexpr__39102","j","fexpr__39103","fexpr__39104","l","fexpr__39105","fexpr__39106","n","fexpr__39107","o","fexpr__39108","p","fexpr__39109","q","fexpr__39110","r","fexpr__39111","fexpr__39112","t","fexpr__39113","rest","cljs.core.apply","sci.lang/Namespace","sci.lang/->Namespace"],"sourcesContent":["(ns sci.lang\n  (:require [clojure.string :as str]\n            [sci.impl.types :as types]\n            [sci.impl.vars :as vars]\n            #?(:cljs [sci.impl.unrestrict :refer [*unrestricted*]]))\n  (:refer-clojure :exclude [Var ->Var var? Namespace ->Namespace]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; marker interface for vars, clj only for now\n#?(:clj (definterface ^{:doc \"Marker interface for SCI vars.\"} IVar))\n\n(defn- class-name [s]\n  (if-let [i (str/last-index-of s \".\")]\n    (subs s (inc i))\n    s))\n\n(defn- package-name [s]\n  (if-let [i (str/last-index-of s \".\")]\n    (subs s 0 i)\n    s))\n\n(deftype ^{:doc \"Representation of a SCI custom type, created e.g. with `(defrecord Foo [])`. The fields of this type are implementation detail and should not be accessed directly.\"}\n    Type [^:volatile-mutable data\n          ^:volatile-mutable namespace\n          ^:volatile-mutable name]\n  sci.impl.types/IBox\n  (getVal [_] data)\n  (setVal [_ v] (set! data v))\n  Object\n  (toString [_]\n    (str (:sci.impl/type-name data)))\n\n  ;; meta is only supported to get our implementation! keys out\n  #?@(:clj\n      [clojure.lang.IMeta\n       (meta [_] data)]\n      :cljs\n      [IMeta\n       (-meta [_] data)])\n\n  ;; we need to support Named for `derive`\n  #?@(:clj\n      [clojure.lang.Named\n       (getNamespace [this]\n                     (if (nil? namespace)\n                       (let [ns (package-name (str this))]\n                         (set! namespace ns)\n                         ns)\n                       namespace))\n       (getName [this]\n                (if (nil? name)\n                  (let [nom (class-name (str this))]\n                    (set! name nom)\n                    nom)\n                  name))]\n      :cljs\n      [INamed\n       (-namespace [this]\n                   (if (nil? namespace)\n                     (let [ns (package-name (str this))]\n                       (set! namespace ns)\n                       ns)\n                     namespace))\n       (-name [this]\n              (if (nil? name)\n                (let [nom (class-name (str this))]\n                  (set! name nom)\n                  nom)\n                name))]))\n\n#?(:clj (defmethod print-method Type [this w]\n          (.write ^java.io.Writer w (str this))))\n\n(defn- throw-root-binding [this]\n  (throw (new #?(:clj IllegalStateException :cljs js/Error)\n                  (str \"Can't change/establish root binding of \" this \" with set\"))))\n\n(defn notify-watches [ref watches old-val new-val]\n  (when watches\n    (when (pos? (count watches))\n      (reduce-kv (fn [_ k f]\n                   (f k ref old-val new-val)\n                   nil)\n                 nil\n                 watches)))\n  ref)\n\n(deftype ^{:doc \"Representation of a SCI var, created e.g. with `(defn foo [])`\n    The fields of this type are implementation detail and should not be accessed\n    directly.\"}\n    Var [#?(:clj ^:volatile-mutable root\n            :cljs ^:mutable root)\n         sym\n         #?(:clj ^:volatile-mutable meta\n            :cljs ^:mutable meta)\n         #?(:clj ^:volatile-mutable thread-bound\n            :cljs ^:mutable thread-bound)\n         #?(:clj ^:volatile-mutable needs-ctx\n            :cljs ^:mutable needs-ctx)\n         #?(:clj ^:volatile-mutable watches\n            :cljs ^:mutable watches)]\n  #?(:clj\n     ;; marker interface, clj only for now\n     sci.lang.IVar)\n  types/HasName\n  (getName [_this]\n    (or (:name meta) sym))\n  vars/IVar\n  (bindRoot [this v]\n    (let [old-root (.-root this)]\n      (vars/with-writeable-var this meta\n        (set! root v))\n      (notify-watches this watches old-root v))\n    ;; this is the return value for alter-var-root which should be the only place calling bindRoot directly\n    v)\n  (getRawRoot [_this]\n    root)\n  (toSymbol [_this]\n    ;; if we have at least a name from metadata, then build the symbol from that\n    (if-let [sym-name (some-> (:name meta) name)]\n      (symbol (some-> (:ns meta) types/getName name) sym-name)\n      ;; otherwise, fall back to the symbol\n      sym))\n  (isMacro [_]\n    (or (:macro meta)\n        (when-some [m (clojure.core/meta root)]\n          (:sci/macro m))))\n  (setThreadBound [this v]\n    (set! (.-thread-bound this) v))\n  (unbind [this]\n    (vars/with-writeable-var this meta\n      (set! (.-root this) (sci.impl.vars.SciUnbound. this))))\n  (hasRoot [_this]\n    (not (instance? sci.impl.vars.SciUnbound root)))\n  vars/DynVar\n  (dynamic? [_this]\n    (:dynamic meta))\n  types/IBox\n  (setVal [this v]\n    (if-let [b (vars/get-thread-binding this)]\n      #?(:clj\n         (let [t (.-thread b)]\n           (if (not (identical? t (Thread/currentThread)))\n             (throw (new IllegalStateException\n                         (format \"Can't set!: %s from non-binding thread\" (vars/toSymbol this))))\n             (types/setVal b v)))\n         :cljs (types/setVal b v))\n      #?(:clj (throw-root-binding this)\n         :cljs (if *unrestricted*\n                 (set! (.-root this) v)\n                 (throw-root-binding this)))))\n  (getVal [_this] root)\n  #?(:clj clojure.lang.IDeref :cljs IDeref)\n  (#?(:clj deref\n      :cljs -deref) [this]\n    (if thread-bound\n      (if-let [tbox (vars/get-thread-binding this)]\n        (types/getVal tbox)\n        root)\n      root))\n  Object\n  (toString [this]\n    (str \"#'\" (vars/toSymbol this)))\n  #?(:cljs IPrintWithWriter)\n  #?(:cljs (-pr-writer [a writer opts]\n                       (-write writer \"#'\")\n                       (-pr-writer (vars/toSymbol a) writer opts)))\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  ;; #?(:clj Comparable :cljs IEquiv)\n  ;; (-equiv [this other]\n  ;;   (if (instance? Var other)\n  ;;     (= (.-sym this) (.-sym other))\n  ;;     false))\n  ;; #?(:clj clojure.lang.IHashEq :cljs IHash)\n  ;; (-hash [_]\n  ;;   (hash-symbol sym))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (vars/with-writeable-var this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (vars/with-writeable-var this meta\n                       (locking (set! meta m)))))\n  #?@(:clj [clojure.lang.IRef\n            (addWatch [this key fn]\n                      (vars/with-writeable-var this meta\n                        (set! watches (assoc watches key fn)))\n                      this)\n            (removeWatch [this _]\n                         (vars/with-writeable-var this meta\n                           (set! watches (dissoc watches key)))\n                         this)])\n  ;; #?(:cljs Fn) ;; In the real CLJS this is there... why?\n  #?(:clj clojure.lang.IFn :cljs IFn)\n  (#?(:clj invoke :cljs -invoke) [this]\n    (@this))\n  (#?(:clj invoke :cljs -invoke) [this a]\n    (@this a))\n  (#?(:clj invoke :cljs -invoke) [this a b]\n    (@this a b))\n  (#?(:clj invoke :cljs -invoke) [this a b c]\n    (@this a b c))\n  (#?(:clj invoke :cljs -invoke) [this a b c d]\n    (@this a b c d))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e]\n    (@this a b c d e))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f]\n    (@this a b c d e f))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g]\n    (@this a b c d e f g))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h]\n    (@this a b c d e f g h))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i]\n    (@this a b c d e f g h i))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j]\n    (@this a b c d e f g h i j))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k]\n    (@this a b c d e f g h i j k))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l]\n    (@this a b c d e f g h i j k l))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m]\n    (@this a b c d e f g h i j k l m))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n]\n    (@this a b c d e f g h i j k l m n))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o]\n    (@this a b c d e f g h i j k l m n o))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p]\n    (@this a b c d e f g h i j k l m n o p))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q]\n    (@this a b c d e f g h i j k l m n o p q))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r]\n    (@this a b c d e f g h i j k l m n o p q r))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s]\n    (@this a b c d e f g h i j k l m n o p q r s))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t]\n    (@this a b c d e f g h i j k l m n o p q r s t))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t rest]\n    (apply @this a b c d e f g h i j k l m n o p q r s t rest))\n  #?(:clj\n     (applyTo [this args]\n              (apply @this args)))\n  vars/CtxVar\n  (needs-ctx? [_] needs-ctx)\n  (needs-ctx! [_] (set! needs-ctx true)))\n\n#?(:clj\n   ;; Use public interface for print-method so it can be overriden in bb itself\n   (do (defmethod print-method sci.lang.IVar [o ^java.io.Writer w]\n         (.write w (str \"#'\" (vars/toSymbol ^sci.impl.vars.IVar o))))\n       (prefer-method print-method sci.lang.IVar clojure.lang.IDeref)))\n\n(deftype\n    ^{:doc\n      \"Representation of a SCI namespace, created e.g. with `(create-ns 'foo)`.\n      The fields of this type are implementation detail and should not be accessed\n      directly.\"}\n    Namespace [name #?(:clj ^:volatile-mutable meta\n                       :cljs ^:mutable meta)]\n  Object\n  (toString [_]\n    (str name))\n  types/HasName\n  (getName [_] name)\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (vars/with-writeable-namespace this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (vars/with-writeable-namespace this meta\n                       (locking (set! meta m))))))\n"]}