{"version":3,"sources":["sci/impl/core_protocols.cljc"],"mappings":"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","names":["js/sci","js/sci.impl","js/sci.impl.core-protocols","js/sci.impl.core-protocols.-deref","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__40928","cljs.core/MultiFn","cljs.core.symbol","sci.impl.core-protocols/-deref","sci.impl.types/type-impl","ref","methods","sci.impl.types/getMethods","fexpr__40937","sci.impl.core-protocols/ideref-default","cljs.core/deref","sci.impl.core-protocols/deref*","x","or__5045__auto__","cljs.core/Atom","cljs.core/PROTOCOL_SENTINEL","sci.impl.core-protocols/cljs-core-ns","sci.lang/->Namespace","sci.impl.core-protocols/deref-protocol","sci.impl.utils.new_var","cljs.core/IDeref","js/sci.impl.core-protocols.-swap!","fexpr__40956","sci.impl.core-protocols/-swap!","js/sci.impl.core-protocols.-reset!","fexpr__40960","sci.impl.core-protocols/-reset!","f","fexpr__40966","a1","fexpr__40969","a2","fexpr__40970","args","cljs.core.apply","v","fexpr__40974","sci.impl.core-protocols/iatom-defaults","cljs.core/swap!","cljs.core/reset!","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.core-protocols/swap!*","seq40990","G__40991","cljs.core/first","cljs.core/next","G__40992","self__5754__auto__","cljs.core.swap_BANG_","sci.impl.core-protocols/reset!*","sci.impl.core-protocols/swap-protocol","cljs.core/ISwap","sci.impl.core-protocols/reset-protocol","cljs.core/IReset","sci.impl.core-protocols/defaults","cljs.core/set","cljs.core.conj"],"sourcesContent":["(ns sci.impl.core-protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [deref -deref -swap! -reset!])\n  (:require\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils]\n   [sci.lang :as lang]))\n\n;;;; IDeref\n\n(defmulti #?(:clj deref :cljs -deref) types/type-impl)\n\n(defmethod #?(:clj deref :cljs -deref) :sci.impl.protocols/reified [ref]\n  (let [methods (types/getMethods ref)]\n    ((get methods #?(:clj 'deref :cljs '-deref)) ref)))\n\n(def ideref-default\n  (defmethod #?(:clj deref :cljs -deref) :default [ref]\n    (clojure.core/deref ref)))\n\n(defn deref*\n  ([x]\n   #?(:clj (if (instance? clojure.lang.IDeref x)\n             (clojure.core/deref x)\n             (deref x))\n      :cljs (if (or (instance? Atom x)\n                    (implements? IDeref x))\n              (clojure.core/deref x)\n              (-deref x))))\n  #?(:clj\n     ([x & args]\n      (apply clojure.core/deref x args))))\n\n#?(:clj\n   (def clj-lang-ns (lang/->Namespace 'clojure.lang nil)))\n#?(:cljs\n   (def cljs-core-ns (lang/->Namespace 'cljs.core nil)))\n\n(def deref-protocol\n  #?(:clj\n     (utils/new-var\n      'clojure.lang.IDeref\n      {:class clojure.lang.IDeref\n       :methods #{deref}\n       :ns clj-lang-ns}\n      {:ns clj-lang-ns})\n     :cljs\n     (utils/new-var\n      'cljs.core.IDeref\n      {:protocol IDeref\n       :methods #{-deref}\n       :ns cljs-core-ns}\n      {:ns cljs-core-ns})))\n\n;;;; end IDeref\n\n;;;; IAtom\n\n;; ;; You can use multiarity in multimethods\n;; (defmulti foo (fn [x & _] x))\n\n;; (defmethod foo :default [_ & _] \"DEFAULT VALUE DISPACHED\")\n\n;; ;; Like a standar multi-arity function\n;; (defmethod foo :bar\n;;   ([_ _] \"ONE ARGUMENT\")\n;;   ([_ _ _] \"TWO ARGUMENTs\")\n;;   ([_ _ _ _] \"THREE ARGUMENTs\")\n;;   ([_ _ _ _ & more] (cl-format nil \"~d ARGUMENTS\" (+ 3 (count more)))))\n\n(defmulti #?(:clj swap :cljs -swap!) types/type-impl)\n(defmulti #?(:clj reset :cljs -reset!) types/type-impl)\n#?(:clj (defmulti compareAndSet types/type-impl))\n#?(:clj (defmulti swapVals types/type-impl))\n#?(:clj (defmulti resetVals types/type-impl))\n\n;;;; Protocol methods\n\n(defmethod #?(:clj swap :cljs -swap!) :sci.impl.protocols/reified\n  ([ref f]\n   (let [methods (types/getMethods ref)]\n     ((get methods #?(:clj 'swap :cljs '-swap!)) ref f)))\n  ([ref f a1]\n   (let [methods (types/getMethods ref)]\n     ((get methods #?(:clj 'swap :cljs '-swap!)) ref f a1)))\n  ([ref f a1 a2]\n   (let [methods (types/getMethods ref)]\n     ((get methods #?(:clj 'swap :cljs '-swap!)) ref f a1 a2)))\n  ([ref f a1 a2 & args]\n   (let [methods (types/getMethods ref)]\n     (apply (get methods #?(:clj 'swap :cljs '-swap!)) ref f a1 a2 args))))\n\n(defmethod #?(:clj reset :cljs -reset!) :sci.impl.protocols/reified [ref v]\n  (let [methods (types/getMethods ref)]\n    ((get methods #?(:clj 'reset :cljs '-reset!)) ref v)))\n\n#?(:clj\n   (defmethod compareAndSet :sci.impl.protocols/reified [ref old new]\n     (let [methods (types/getMethods ref)]\n       ((get methods 'compareAndSet) ref old new))))\n\n#?(:clj\n   (defmethod swapVals :sci.impl.protocols/reified\n     ([ref f]\n      (let [methods (types/getMethods ref)]\n        ((get methods 'swapVals) ref f)))\n     ([ref f a1]\n      (let [methods (types/getMethods ref)]\n        ((get methods 'swapVals) ref f a1)))\n     ([ref f a1 a2]\n      (let [methods (types/getMethods ref)]\n        ((get methods 'swapVals) ref f a1 a2)))\n     ([ref f a1 a2 & args]\n      (let [methods (types/getMethods ref)]\n        (apply (get methods 'swapVals) ref f a1 a2 args)))))\n\n#?(:clj\n   (defmethod resetVals :sci.impl.protocols/reified [ref v]\n     (let [methods (types/getMethods ref)]\n       ((get methods 'resetVals) ref v))))\n\n;;;; Defaults\n\n(def iatom-defaults\n  [(defmethod #?(:clj swap :cljs -swap!) :default [ref f & args]\n     ;; TODO: optimize arities\n     (apply clojure.core/swap! ref f args))\n\n   (defmethod #?(:clj reset :cljs -reset!) :default [ref v]\n     (reset! ref v))\n\n   #?(:clj\n      (defmethod compareAndSet :default [ref old new]\n        (compare-and-set! ref old new)))\n\n   #?(:clj\n      (defmethod swapVals :default [ref & args]\n        (apply swap-vals! ref args)))\n\n   #?(:clj\n      (defmethod resetVals :default [ref v]\n        (reset-vals! ref v)))])\n\n;;;; Re-routing\n\n(defn swap!* [ref f & args]\n  (if\n      ;; fast-path for host IAtom\n      #?(:cljs (or (instance? Atom ref)\n                   (implements? ISwap ref))\n         :clj (instance? clojure.lang.IAtom ref))\n    (if args\n      (apply clojure.core/swap! ref f args)\n      (clojure.core/swap! ref f))\n    (if args\n      (apply #?(:clj swap :cljs -swap!) ref f args)\n      (#?(:clj swap :cljs -swap!) ref f))))\n\n(defn reset!* [ref v]\n  (if\n      ;; fast-path for host IAtoms\n      #?(:cljs (or (instance? Atom ref)\n                   (implements? IReset ref))\n         :clj (instance? clojure.lang.IAtom ref))\n    (clojure.core/reset! ref v)\n    (#?(:clj reset :cljs -reset!) ref v)))\n\n#?(:clj\n   (defn compare-and-set!* [ref old new]\n     (if (instance? clojure.lang.IAtom ref)\n       ;; fast-path for host IAtoms\n       (clojure.core/compare-and-set! ref old new)\n       (compareAndSet ref old new))))\n\n#?(:clj\n   (defn swap-vals!* [ref f & args]\n     (if (instance? clojure.lang.IAtom ref)\n       (apply clojure.core/swap-vals! ref f args)\n       (apply swapVals ref f args))))\n\n#?(:clj\n   (defn reset-vals!* [ref v]\n     (if (instance? clojure.lang.IAtom ref)\n       (clojure.core/reset-vals! ref v)\n       (resetVals ref v))))\n\n;;;; Protocol vars\n\n(def swap-protocol\n  #?(:clj\n     (utils/new-var\n      'clojure.lang.IAtom\n      {:class clojure.lang.IAtom\n       :methods #{swap, reset, compareAndSet}\n       :ns clj-lang-ns}\n      {:ns clj-lang-ns})\n     :cljs\n     (utils/new-var\n      'cljs.core.ISwap\n      {:protocol ISwap\n       :methods #{-swap!}\n       :ns cljs-core-ns}\n      {:ns cljs-core-ns})))\n\n#?(:cljs\n   (def reset-protocol\n     (utils/new-var\n      'cljs.core.IReset\n      {:protocol IReset\n       :methods #{-reset!}\n       :ns cljs-core-ns}\n      {:ns cljs-core-ns})))\n\n#?(:clj\n   (def iatom2-protocol\n     (utils/new-var\n      'clojure.lang.IAtom2\n      {:class clojure.lang.IAtom2\n       :methods #{swap, reset, compareAndSet, swapVals, resetVals}\n       :ns clj-lang-ns}\n      {:ns clj-lang-ns})))\n\n;;;; end IAtom\n\n(def defaults (set (conj iatom-defaults ideref-default)))\n"]}