{"version":3,"sources":["sci/nrepl/info.cljs"],"mappings":";AAMA,0BAAA,1BAAMA,4DAAUC,QAAQC;AAAxB,AACE,4CAAA,rCAACC,6BAAkBF,aAAaC;;AAElC,sBAAA,8BAAAE,pDAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAA6BM;UAA7B,AAAAJ,4CAAAF,eAAA,jEAAoBI;UAApB,AAAAF,4CAAAF,eAAA,jEAAwBK;AAAxB,AACE,GAAA,AAAAE,cAAQH;AAAR,kDAAA,0DAAA,mFAAA,WAAA,eAAA,oDAAA;;AAGE,IAAMO,+BAIC,wBAAA,xBAAChB,mGAASW,3HACV,AAACX,mIAASS;IALjBI,aAMiB,iBAAA,AAAA,0FAAA,sFACM,AAACO,2BAAiBV,IAAIM;gBAD5B,QAAAG,JAEqBE;AAFrB,AAAA,0FAAA,kFAGgB,4CAAKA;;WATtC,AAAAP,4CAAAD,WAAA,IAAA,lEAMOI;UANP,AAAAH,4CAAAD,WAAA,IAAA,jEAMYK;IANZH,aAU4CG;IAV5CH,iBAAA,AAAAT,4BAAAS;UAAA,AAAAR,4CAAAQ,eAAA,jEAUcO;WAVd,AAAAf,4CAAAQ,eAAA,lEAUkBQ;WAVlB,AAAAhB,4CAAAQ,eAAA,lEAUuBS;WAVvB,AAAAjB,4CAAAQ,eAAA,lEAU4BU;eAV5B,AAAAlB,4CAAAQ,eAAA,tEAUiCW;AAVjC,AAWE,oBACI,iBAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AAAU,yDAAA,lDAACC,6CAAEX;;AAAbU;;;AACA,IAAAE,WAAA,2CAAA,gDACS,iBAAAC,WAAQZ;IAARY,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,8EAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,yBAAAA,lBAAgBC;;KADzB,oLAAA,vHAEe,AAACC,wGAAON,uEACX,6CAAA,WAAAO,xDAACC;AAAD,AAAO,kEAAAD,3DAACC,6CAAKC;aAHzB,wJAAA,0DAAA,mFAAA,eAAA,9TAGgCT,+EACb,6EAAA,7EAAO,AAACU,8CAAMC,gBAAMX,sOAE5BD;IANXI,eAAA,sIAAAA,pHAOIP,KAAI,8CAAAO,SAAA,vDAACS,0GAAWhB;IAPpBO,eAAA,+IAAAA,7HAQIN,MAAK,8CAAAM,aAAA,3DAACS,iHAAYf;AARtB,AAAA,oBASIC;AAAK,qDAAAK,aAAA,3DAACS,+GAAYd;;AATtBK;;;AAFJ,kDAAA,0DAAA,mFAAA,OAAA","names":["sci.nrepl.info/format-1","fmt-str","x","clojure.string/replace-first","p__46589","map__46593","cljs.core/--destructure-map","cljs.core.get","sci.nrepl.info/info","sym","ctx","ns-str","cljs.core/not","vec__46598","cljs.core.nth","map__46601","code","kind","val","e46605","sci.core/eval-string*","e","doc","file","line","name","arglists","and__5043__auto__","cljs.core._EQ_","G__46613","G__46614","cljs.core/ns-name","cljs.core.pr_str","p1__46583#","cljs.core.mapv","cljs.core/str","cljs.core.apply","cljs.core/array","cljs.core.assoc"],"sourcesContent":["(ns\n    sci.nrepl.info\n    (:require\n     [clojure.string :as str]\n     [sci.core :as sci]))\n\n(defn format-1 [fmt-str x]\n  (str/replace-first fmt-str \"%s\" x))\n\n(defn info [{:keys [sym ctx] ns-str :ns}]\n  (if-not sym\n    {:status [\"no-eldoc\" \"done\"]\n     :err \"Message should contain a `sym`\"}\n    (let [code\n          (->\n           \"(when-let [the-var (ns-resolve '%s '%s)]\n               (meta the-var))\"\n           (format-1 ns-str)\n           (format-1 sym))\n          [kind val] (try [::success\n                           (sci/eval-string* ctx code)]\n                          (catch :default e\n                            [::error (str e)]))\n          {:keys [doc file line name arglists]} val]\n      (if\n          (and name (= kind ::success))\n          (cond->\n              {:ns (some-> val :ns ns-name)\n               :arglists (pr-str arglists)\n               :eldoc (mapv #(mapv str %) arglists)\n               :arglists-str (.join (apply array arglists) \"\\n\")\n               :status [\"done\"]\n               :name name}\n              doc (assoc :doc doc)\n              file (assoc :file file)\n              line (assoc :line line))\n          {:status [\"done\" \"no-eldoc\"]}))))\n"]}