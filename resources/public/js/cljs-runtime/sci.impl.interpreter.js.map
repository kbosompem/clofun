{"version":3,"sources":["sci/impl/interpreter.cljc"],"mappings":"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","names":["sci.impl.interpreter/eval-form","ctx","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","m__43577__auto__","loc__43578__auto__","and__5043__auto__","sci.impl.utils/*top-level-location*","cljs.core/meta","exprs","cljs.core/rest","ret","cljs.core/seq","G__45230","G__45231","upper-sym","cljs.core.gensym","cb","cljs.core/volatile!","cljs.core.assoc","analyzed","sci.impl.analyzer.analyze","binding-array-size","cljs.core/count","cljs.core/deref","cljs.core.get_in","bindings","cljs.core.object_array","sci.impl.types/EvalForm","G__45232","G__45233","e45234","sci.impl.types/eval","js/Error","e","sci.impl.utils.rethrow_with_location_of_node","e45235","cljs.core/vreset!","sci.impl.utils/eval-form-state","var_args","G__45237","sci.impl.interpreter/eval-string*","s","sci.impl.interpreter.eval_string_STAR_","opts","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.utils/current-ns","or__5045__auto__","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","expr","sci.impl.parser.parse_next","cljs.core/keyword-identical?","sci.impl.parser/eof","sci.impl.utils/eval-string*","G__45242","sci.impl.interpreter/eval-string","sci.impl.interpreter.eval_string","init-ctx","sci.impl.opts/init"],"sourcesContent":["(ns sci.impl.interpreter\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-1])\n  (:require\n   [clojure.tools.reader.reader-types :as r]\n   [sci.impl.analyzer :as ana]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as p]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn eval-form [ctx form]\n  ;; (.println System/err \"form\")\n  ;; (.println System/err form)\n  (if (seq? form)\n    (if (= 'do (first form))\n      (ana/with-top-level-loc true (meta form)\n        (loop [exprs (rest form)\n               ret nil]\n          (if (seq exprs)\n            (recur\n             (rest exprs)\n             (eval-form ctx (first exprs)))\n            ret)))\n      (let [;; take care of invocation array for let\n            upper-sym (gensym)\n            cb (volatile! {upper-sym {0 {:syms {}}}})\n            ctx (assoc ctx\n                       :parents [upper-sym 0]\n                       :closure-bindings cb)\n            analyzed (ana/analyze ctx form true)\n            binding-array-size (count (get-in @cb [upper-sym 0 :syms]))\n            bindings (object-array binding-array-size)]\n        (if (instance? #?(:clj sci.impl.types.EvalForm\n                          :cljs sci.impl.types/EvalForm) analyzed)\n          (eval-form ctx (types/getVal analyzed))\n          (try (types/eval analyzed ctx bindings)\n               (catch #?(:clj Throwable :cljs js/Error) e\n                 (utils/rethrow-with-location-of-node ctx bindings e analyzed))))))\n    (let [upper-sym (gensym)\n          cb (volatile! {upper-sym {0 {:syms {}}}})\n          ctx (assoc ctx\n                     :parents [upper-sym 0]\n                     :closure-bindings cb)\n          analyzed (ana/analyze ctx form)\n          binding-array-size (count (get-in @cb [upper-sym 0 :syms]))\n          bindings (object-array binding-array-size)]\n      (try (types/eval analyzed ctx bindings)\n           (catch #?(:clj Throwable :cljs js/Error) e\n             (utils/rethrow-with-location-of-node ctx bindings e analyzed))))))\n\n(vreset! utils/eval-form-state eval-form)\n\n(defn eval-string*\n  ([ctx s]\n   (eval-string* ctx s nil))\n  ([ctx s opts]\n   (vars/with-bindings {utils/current-ns (or (when opts (:ns opts)) @utils/current-ns)}\n     (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n       (loop [ret nil]\n         (let [expr (p/parse-next ctx reader)]\n           (if (utils/kw-identical? p/eof expr)\n             (if (when opts (:sci.impl/eval-string+ opts))\n               {:val ret\n                :ns @utils/current-ns}\n               ret)\n             (let [ret (eval-form ctx expr)]\n               (recur ret)))))))))\n\n(vreset! utils/eval-string* eval-string*)\n\n;;;; Called from public API\n\n(defn eval-string\n  ([s] (eval-string s nil))\n  ([s opts]\n   (let [init-ctx (opts/init opts)\n         ret (eval-string* init-ctx s)]\n     ret)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"((fn f [x] (if (< x 3) (recur (inc x)) x)) 0)\")\n  )\n"]}