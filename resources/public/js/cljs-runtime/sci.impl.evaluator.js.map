{"version":3,"sources":["sci/impl/evaluator.cljc"],"mappings":"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","names":["sci.impl.evaluator/macros","sci.impl.evaluator/eval-def","ctx","bindings","var-name","init","m","sci.impl.types/eval","cnn","sci.impl.types/getName","assoc-in-env","env","the-current-ns","cljs.core.get","prev","sci.impl.utils/var?","sci.lang/Var","cljs.core.symbol","cljs.core/meta","v","sci.impl.utils/var-unbound","G__42185","cljs.core.alter_meta_BANG_","cljs.core/merge","sci.impl.vars/bindRoot","cljs.core.assoc","cljs.core/assoc-in","cljs.core.swap_BANG_","var_args","G__42187","sci.impl.evaluator/eval-case","js/Error","case-map","case-val","found","cljs.core/keyword-identical?","case-default","sci.impl.evaluator/eval-try","body","catches","finally","sci-error","e42203","*in-try*-orig-val__42210","*in-try*-temp-val__42211","sci.impl.utils/*in-try*","or__5045__auto__","cljs.core/seq","e","temp__5802__auto__","vec__42207","cljs.core.nth","_","r","cljs.core.reduce","c","clazz","sci.impl.types/NodeR","c__5078__auto__","x__5079__auto__","cljs.core/reduced","sci.impl.utils.rethrow_with_location_of_node","sci.impl.evaluator/allowed-instance-method-invocation","instance-expr","method-str","args","arg-count","instance-expr*","sci.impl.interop/invoke-instance-method","sci.impl.evaluator/allowed-instance-field-invocation","sci.impl.interop/invoke-instance-field","sci.impl.evaluator/none-sentinel","js/Object","sci.impl.evaluator/get-from-type","instance","sci.impl.records/SciRecord","cljs.core.keyword","sci.impl.deftype/SciType","sci.impl.evaluator/eval-instance-method-invocation","field-access","allowed","instance-meta","tag-class","cljs.core/deref","instance-class","cljs.core/type","class->opts","allowed?","instance-class-name","instance-class-symbol","target-class","temp__5804__auto__","f","sci.impl.utils.throw_error_with_location","G__42250","sci.impl.evaluator/eval-resolve","sym","sci.impl.evaluator.eval_resolve","cljs.core/not","cljs.core/contains?","res","cljs.core/second","fexpr__42252","sci.impl.utils/lookup","cljs.core/vreset!","sci.impl.utils/eval-resolve-state","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.evaluator/eval-import","seq42270","G__42271","cljs.core/first","cljs.core/next","self__5754__auto__","import-symbols-or-lists","specs","p1__42253#","cljs.core.map","cljs.core/seq?","cljs.core._EQ_","spec","vec__42273","package","classes","cljs.core/Symbol","s","last-dot","clojure.string.last_index_of","package+class-name","cljs.core.subs","p","cs","cljs.core/rest","class","fq-class-name","sci.impl.interop/resolve-class","sci.impl.utils/current-ns-name","rec-var","rec-ns","sci.impl.utils/demunge","cljs.core.get_in","cljs.core.mapv","p1__41932#","cljs.core.apply","cljs.core/count","sci.impl.evaluator/fn-call","G__42503","arg42298","arg42299","arg42300","arg42301","arg42302","arg42303","arg42304","arg42305","arg42306","arg42307","arg42308","arg42309","arg42310","arg42311","arg42312","arg42313","arg42314","arg42315","arg42316","arg42317","arg42318","arg42319","arg42320","arg42321","arg42322","arg42323","arg42324","arg42325","arg42326","arg42327","arg42328","arg42329","arg42330","arg42331","arg42332","arg42333","arg42334","arg42335","arg42336","arg42337","arg42338","arg42339","arg42340","arg42341","arg42342","arg42343","arg42344","arg42345","arg42346","arg42347","arg42348","arg42349","arg42350","arg42351","arg42352","arg42353","arg42354","arg42355","arg42356","arg42357","arg42358","arg42359","arg42360","arg42361","arg42362","arg42363","arg42364","arg42365","arg42366","arg42367","arg42368","arg42369","arg42370","arg42371","arg42372","arg42373","arg42374","arg42375","arg42376","arg42377","arg42378","arg42379","arg42380","arg42381","arg42382","arg42383","arg42384","arg42399","arg42400","arg42401","arg42402","arg42403","arg42404","arg42405","arg42406","arg42407","arg42408","arg42409","arg42410","arg42411","arg42412","arg42413","arg42414","arg42415","arg42416","arg42417","arg42418","arg42419","arg42420","arg42421","arg42422","arg42423","arg42424","arg42425","arg42426","arg42427","arg42428","arg42429","arg42430","arg42431","arg42432","arg42433","arg42434","arg42435","arg42436","arg42437","arg42438","arg42439","arg42440","arg42441","arg42442","arg42443","arg42444","arg42445","arg42446","arg42447","arg42448","arg42449","arg42450","arg42451","arg42452","arg42453","arg42454","arg42455","arg42456","arg42457","arg42458","arg42459","arg42460","arg42461","arg42462","arg42463","arg42464","arg42465","arg42466","arg42467","arg42468","arg42469","arg42470","arg42471","arg42472","arg42473","arg42474","arg42475","arg42476","arg42477","arg42478","arg42479","arg42480","arg42481","arg42482","arg42483","arg42484","arg42485","arg42486","arg42487","arg42488","arg42489","arg42490","arg42491","arg42492","arg42493","arg42494","arg42495","arg42496","arg42497","arg42498","arg42499","arg42500","arg42501"],"sourcesContent":["(ns sci.impl.evaluator\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.deftype]\n   [sci.impl.interop :as interop]\n   [sci.impl.macros :as macros]\n   [sci.impl.records]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [#?(:cljs kw-identical?)\n                                     rethrow-with-location-of-node\n                                     throw-error-with-location]]\n   [sci.impl.vars :as vars]\n   [sci.lang])\n  #?(:cljs (:require-macros [sci.impl.evaluator :refer [def-fn-call resolve-symbol]])))\n\n(declare fn-call)\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def #?(:clj ^:const macros :cljs macros)\n  '#{do fn def defn\n     syntax-quote})\n\n(defn eval-def\n  [ctx bindings var-name init m]\n  (let [init (types/eval init ctx bindings)\n        m (types/eval m ctx bindings)\n        cnn (types/getName (:ns m))\n        assoc-in-env\n        (fn [env]\n          (let [the-current-ns (get (get env :namespaces) cnn)\n                prev (get the-current-ns var-name)\n                prev (if-not (utils/var? prev)\n                       (sci.lang.Var. prev (symbol (str cnn) (str var-name))\n                                      (meta prev)\n                                      false\n                                      false\n                                      nil)\n                       prev)\n                v (if (identical? utils/var-unbound init)\n                    (doto prev\n                      (alter-meta! merge m))\n                    (do (vars/bindRoot prev init)\n                        (alter-meta! prev merge m)\n                        prev))\n                the-current-ns (assoc the-current-ns var-name v)]\n            (assoc-in env [:namespaces cnn] the-current-ns)))\n        env (swap! (:env ctx) assoc-in-env)]\n    ;; return var\n    (get (get (get env :namespaces) cnn) var-name)))\n\n(defmacro resolve-symbol [bindings sym]\n  `(.get ~(with-meta bindings\n            {:tag 'java.util.Map}) ~sym))\n\n(declare eval-string*)\n\n(defn eval-case\n  ([ctx bindings case-map case-val]\n   (let [v (types/eval case-val ctx bindings)\n         found (get case-map v ::not-found)]\n     (if (utils/kw-identical? ::not-found found)\n       (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                   (str \"No matching clause: \" v)))\n       (types/eval found ctx bindings))))\n  ([ctx bindings case-map case-val case-default]\n   (let [v (types/eval case-val ctx bindings)\n         found (get case-map v ::not-found)]\n     (if (utils/kw-identical? ::not-found found)\n       (types/eval case-default ctx bindings)\n       (types/eval found ctx bindings)))))\n\n(defn eval-try\n  [ctx bindings body catches finally sci-error]\n  (try\n    (binding [utils/*in-try* (or (when sci-error\n                                   :sci/error)\n                                 ;; try/finally without catch\n                                 (seq catches)\n                                 utils/*in-try*)]\n      (types/eval body ctx bindings))\n    (catch #?(:clj Throwable :cljs :default) e\n      (if-let\n       [[_ r]\n        (reduce (fn [_ c]\n                  (let [clazz (:class c)]\n                    (when #?(:cljs\n                             (or (kw-identical? :default clazz)\n                                 (if (instance? sci.impl.types/NodeR clazz)\n                                   (instance? (types/eval clazz ctx bindings) e)\n                                   (instance? clazz e)))\n                             :clj (instance? clazz e))\n                      (reduced\n                       [::try-result\n                        (do (aset ^objects bindings (:ex-idx c) e)\n                            (types/eval (:body c) ctx bindings))]))))\n                nil\n                catches)]\n        r\n        (rethrow-with-location-of-node ctx bindings e body)))\n    (finally\n      (types/eval finally ctx bindings))))\n\n;;;; Interop\n\n#?(:cljs\n   (defn allowed-instance-method-invocation [ctx bindings instance-expr method-str args arg-count]\n     (let [instance-expr* (types/eval instance-expr ctx bindings)]\n       (interop/invoke-instance-method ctx bindings instance-expr* nil method-str args arg-count))))\n\n#?(:cljs\n   (defn allowed-instance-field-invocation [ctx bindings instance-expr method-str]\n     (let [instance-expr* (types/eval instance-expr ctx bindings)]\n       (interop/invoke-instance-field instance-expr* nil method-str))))\n\n(def none-sentinel #?(:clj (Object.) :cljs (js/Object.)))\n\n(defn get-from-type [instance method-str #?(:clj arg-count :cljs args)]\n  (if (zero? #?(:clj arg-count :cljs (alength args)))\n    (if (instance? sci.impl.records.SciRecord instance)\n      (get instance (keyword method-str) none-sentinel)\n      (if (instance? sci.impl.deftype.SciType instance)\n        (get (types/getVal instance) (symbol method-str) none-sentinel)\n        none-sentinel))\n    none-sentinel))\n\n(defn eval-instance-method-invocation\n  [ctx bindings instance-expr method-str field-access args #?(:cljs allowed) arg-count]\n  (let [instance-meta (meta instance-expr)\n        tag-class (:tag-class instance-meta)\n        instance-expr* (types/eval instance-expr ctx bindings)\n        v (get-from-type instance-expr* method-str #?(:clj arg-count :cljs args))]\n    (if-not (identical? none-sentinel v)\n      v\n      (let [instance-class (or tag-class (#?(:clj class :cljs type) instance-expr*))\n            env @(:env ctx)\n            class->opts (:class->opts env)\n            allowed? (or\n                      #?(:cljs allowed)\n                      (get class->opts :allow)\n                      (let [instance-class-name #?(:clj (.getName ^Class instance-class)\n                                                   :cljs (.-name instance-class))\n                            instance-class-symbol (symbol instance-class-name)]\n                        (get class->opts instance-class-symbol)))\n            ^Class target-class (if allowed? instance-class\n                                    (when-let [f (:public-class env)]\n                                      (f instance-expr*)))]\n        ;; we have to check options at run time, since we don't know what the class\n        ;; of instance-expr is at analysis time\n        (when-not #?(:clj target-class\n                     :cljs allowed?)\n          (throw-error-with-location (str \"Method \" method-str \" on \" instance-class \" not allowed!\") instance-expr))\n        (if field-access\n          (interop/invoke-instance-field instance-expr* target-class method-str)\n          (interop/invoke-instance-method ctx bindings instance-expr* target-class method-str args arg-count))))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(declare eval-form)\n\n(defn eval-resolve\n  ([ctx bindings sym]\n   (eval-resolve ctx bindings nil sym))\n  ([ctx bindings env sym]\n   (when (or (not env)\n             (not (contains? env sym)))\n     (let [sym (types/eval sym ctx bindings)\n           res (second (@utils/lookup ctx sym false))]\n       (when-not #?(:cljs (instance? sci.impl.types/NodeR res)\n                    :clj (instance? sci.impl.types.Eval res))\n         res)))))\n\n(vreset! utils/eval-resolve-state eval-resolve)\n\n;;;; End namespaces\n\n;;;; Import\n\n(defn eval-import [ctx & import-symbols-or-lists]\n  ;;(prn import-symbols-or-lists)\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)\n        env (:env ctx)]\n    (reduce (fn [_ spec]\n              (let [[package classes]\n                    (if (symbol? spec)\n                      (let [s (str spec)\n                            last-dot (str/last-index-of s \".\")\n                            package+class-name\n                            (if last-dot\n                              [(symbol (subs s 0 last-dot))\n                               [(symbol (subs s (inc last-dot) (count s)))]]\n                              [nil [spec]])]\n                        package+class-name)\n                      (let [p (first spec)\n                            cs (rest spec)]\n                        [p cs]))]\n                (reduce (fn [_ class]\n                          (let [fq-class-name (symbol (if package (str package \".\" class)\n                                                          class))]\n                            (if-let [clazz (interop/resolve-class ctx fq-class-name)]\n                              (let [cnn (utils/current-ns-name)]\n                                (swap! env assoc-in [:namespaces cnn :imports class] fq-class-name)\n                                clazz)\n                              (if-let [rec-var\n                                       (let [rec-ns (symbol (utils/demunge (str package)))\n                                             rec-var (get-in @env [:namespaces rec-ns class])]\n                                         rec-var)]\n                                (let [cnn (utils/current-ns-name)]\n                                  (swap! env assoc-in [:namespaces cnn :refers class] rec-var)\n                                  @rec-var)\n                                (throw (new #?(:clj Exception :cljs js/Error)\n                                            (str \"Unable to resolve classname: \" fq-class-name)))))))\n                        nil\n                        classes)))\n            nil\n            specs)))\n\n;;;; End import\n\n(declare eval-string)\n\n(macros/deftime\n  ;; This macro generates a function of the following form for 20 arities:\n  #_(defn fn-call [ctx bindings f args]\n      (case (count args)\n        0 (f)\n        1 (let [arg (eval ctx bindings (first args))]\n            (f arg))\n        2 (let [arg1 (eval ctx bindings (first args))\n                args (rest args)\n                arg2 (eval ctx bindings (first args))]\n            (f arg1 arg2))\n        ,,,\n        (let [args (mapv #(eval ctx bindings %) args)]\n          (apply f args))))\n  (defmacro def-fn-call []\n    (let [cases\n          (mapcat (fn [i]\n                    [i (let [arg-syms (map (fn [_] (gensym \"arg\")) (range i))\n                             args-sym 'args ;; (gensym \"args\")\n                             let-syms (interleave arg-syms (repeat args-sym))\n                             let-vals (interleave (repeat `(types/eval (first ~args-sym) ~'ctx ~'bindings))\n                                                  (repeat `(rest ~args-sym)))\n                             let-bindings (vec (interleave let-syms let-vals))]\n                         `(let ~let-bindings\n                            (~'f ~@arg-syms)))]) (range 20))\n          cases (concat cases ['(let [args (mapv #(types/eval % ctx bindings) args)]\n                                  (apply f args))])]\n      ;; Normal apply:\n      #_`(defn ~'fn-call ~'[ctx f args]\n           (apply ~'f (map #(eval ~'ctx %) ~'args)))\n      `(defn ~'fn-call ~'[ctx bindings f args]\n         ;; TODO: can we prevent hitting this at all, by analyzing more efficiently?\n         ;; (prn :count ~'f ~'(count args) ~'args)\n         (case ~'(count args)\n           ~@cases)))))\n\n(def-fn-call)\n\n;; The following types cannot be treated as constants in the analyzer\n#?(:clj (extend-protocol types/Eval\n          java.lang.Class\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentArrayMap\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentVector\n          (eval [expr _ _]\n            expr)\n          clojure.lang.Symbol\n          (eval [expr _ _]\n            expr)\n          sci.lang.Namespace\n          (eval [expr _ _]\n            expr)\n          sci.lang.Var\n          (eval [expr _ _]\n            expr)\n          clojure.lang.MultiFn\n          (eval [expr _ _]\n            expr)\n          Object\n          (eval [expr _ _]\n            expr)\n          ;; literal nils are treated like constants, but nil might also happen\n          ;; as a result of analysis\n          nil (eval [_ _ _] nil)))\n"]}