{"version":3,"sources":["sci/nrepl/completions.cljs"],"mappings":"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","names":["sci.nrepl.completions/format","fmt-str","x","clojure.string/replace","sci.nrepl.completions/fully-qualified-syms","ctx","ns-sym","syms","sci.core/eval-string*","sym-strs","p1__46581#","cljs.core.map","sym-expr","clojure.string.join","p1__46582#","cljs.core.remove","clojure.string/starts-with?","sci.nrepl.completions/ns-imports->completions","query-ns","query","vec__46594","cljs.core.nth","_ns-part","name-part","clojure.string.split","resolved","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.pr_str","temp__5804__auto__","vec__46610","prefix","imported","ends-with-dot?","clojure.string/ends-with?","fields","cljs.core/butlast","joined","cljs.core.apply","sci.nrepl.completions.goog$module$goog$object.getValueByKeys","props","obj","js/Object.getPrototypeOf","cljs.core.into","js/Object.getOwnPropertyNames","completions","k","p__46615","vec__46616","sci.nrepl.completions/match","_alias->ns","ns->alias","sym-ns","sym-name","qualifier","pat","cljs.core/re-pattern","or__5045__auto__","and__5043__auto__","cljs.core._EQ_","cljs.core/re-find","cljs.core.get","cljs.core.symbol","p__46620","map__46621","cljs.core/--destructure-map","sci.nrepl.completions/completions","ns-str","request","e46622","sci-ns","sci.core/find-ns","bm__46354__auto__","cljs.core/map?","js/Error","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.core/ns","cljs.core/deref","temp__5802__auto__","has-namespace?","clojure.string/includes?","G__46629","cljs.core/first","from-current-ns","sym","cljs.core/namespace","cljs.core/name","alias->ns","cljs.core/zipmap","cljs.core/vals","cljs.core/keys","from-aliased-nss","cljs.core.doall","cljs.core.mapcat","alias","ns","all-namespaces","from-imports","fully-qualified-names","svs","cljs.core.keep","entry","p__46632","vec__46639","namespace","name","G__46650","cljs.core.assoc","cljs.core.distinct","e","js/console.error"],"sourcesContent":["(ns sci.nrepl.completions\n  (:require [clojure.string :as str]\n            [goog.object :as gobject]\n            [sci.core :as sci]))\n\n(defn format [fmt-str x]\n  (str/replace fmt-str \"%s\" x))\n\n(defn fully-qualified-syms [ctx ns-sym]\n  (let [syms (sci/eval-string* ctx (format \"(keys (ns-map '%s))\" ns-sym))\n        sym-strs (map #(str \"`\" %) syms)\n        sym-expr (str \"[\" (str/join \" \" sym-strs) \"]\")\n        syms (sci/eval-string* ctx sym-expr)\n        syms (remove #(str/starts-with? (str %) \"nbb.internal\") syms)]\n    syms))\n\n(defn- ns-imports->completions [ctx query-ns query]\n  (let [[_ns-part name-part] (str/split query #\"/\")\n        resolved (sci/eval-string* ctx\n                                   (pr-str `(let [resolved# (resolve '~query-ns)]\n                                              (when-not (var? resolved#)\n                                                resolved#))))]\n    (when resolved\n      (when-let [[prefix imported] (if name-part\n                                     (let [ends-with-dot? (str/ends-with? name-part \".\")\n                                           fields (str/split name-part #\"\\.\")\n                                           fields (if ends-with-dot?\n                                                    fields\n                                                    (butlast fields))]\n                                       [(str query-ns \"/\" (when (seq fields)\n                                                            (let [joined (str/join \".\" fields)]\n                                                              (str joined \".\"))))\n                                        (apply gobject/getValueByKeys resolved\n                                               fields)])\n                                     [(str query-ns \"/\") resolved])]\n        (let [props (loop [obj imported\n                           props []]\n                      (if obj\n                        (recur (js/Object.getPrototypeOf obj)\n                               (into props (js/Object.getOwnPropertyNames obj)))\n                        props))\n              completions (map (fn [k]\n                                 [nil (str prefix k)]) props)]\n          completions)))))\n\n(defn- match [_alias->ns ns->alias query [sym-ns sym-name qualifier]]\n  (let [pat (re-pattern query)]\n    (or (when (and (= :unqualified qualifier) (re-find pat sym-name))\n          [sym-ns sym-name])\n        (when sym-ns\n          (or (when (re-find pat (str (get ns->alias (symbol sym-ns)) \"/\" sym-name))\n                [sym-ns (str (get ns->alias (symbol sym-ns)) \"/\" sym-name)])\n              (when (re-find pat (str sym-ns \"/\" sym-name))\n                [sym-ns (str sym-ns \"/\" sym-name)]))))))\n\n(defn completions [{:keys [ctx]\n                    ns-str :ns\n                    :as request}]\n  (try\n    (let [sci-ns (when ns-str\n                   (sci/find-ns ctx (symbol ns-str)))]\n      (sci/binding [sci/ns (or sci-ns @sci/ns)]\n        (if-let [query (or (:symbol request)\n                           (:prefix request))]\n          (let [has-namespace? (str/includes? query \"/\")\n                query-ns (when has-namespace? (some-> (str/split query #\"/\")\n                                                      first symbol))\n                from-current-ns (fully-qualified-syms ctx (sci/eval-string* ctx \"(ns-name *ns*)\"))\n                from-current-ns (map (fn [sym]\n                                       [(namespace sym) (name sym) :unqualified])\n                                     from-current-ns)\n                alias->ns (sci/eval-string* ctx \"(let [m (ns-aliases *ns*)] (zipmap (keys m) (map ns-name (vals m))))\")\n                ns->alias (zipmap (vals alias->ns) (keys alias->ns))\n                from-aliased-nss (doall (mapcat\n                                         (fn [alias]\n                                           (let [ns (get alias->ns alias)\n                                                 syms (sci/eval-string* ctx (format \"(keys (ns-publics '%s))\" ns))]\n                                             (map (fn [sym]\n                                                    [(str ns) (str sym) :qualified])\n                                                  syms)))\n                                         (keys alias->ns)))\n                all-namespaces (->> (sci/eval-string* ctx \"(all-ns)\")\n                                    (map (fn [ns]\n                                           [(str ns) nil :qualified])))\n                from-imports (when has-namespace? (ns-imports->completions ctx query-ns query))\n                fully-qualified-names (when-not from-imports\n                                        (when has-namespace?\n                                          (let [ns (get alias->ns query-ns query-ns)\n                                                syms (sci/eval-string* ctx (format \"(and (find-ns '%s)\n                                                                                         (keys (ns-publics '%s)))\"\n                                                                                   ns))]\n                                            (map (fn [sym]\n                                                   [(str ns) (str sym) :qualified])\n                                                 syms))))\n                svs (concat from-current-ns from-aliased-nss all-namespaces fully-qualified-names)\n                completions (keep (fn [entry]\n                                    (match alias->ns ns->alias query entry))\n                                  svs)\n                completions (concat completions from-imports)\n                completions (->> (map (fn [[namespace name]]\n                                        (cond-> {\"candidate\" (str name)}\n                                          namespace (assoc \"ns\" (str namespace))))\n                                      completions)\n                                 distinct vec)]\n            {:completions completions\n             :status [\"done\"]})\n          {:status [\"done\"]})))\n    (catch :default e\n      (js/console.error \"ERROR\" e)\n      {:completions []\n       :status [\"done\"]})))\n"]}