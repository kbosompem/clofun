{"version":3,"sources":["sci/impl/load.cljc"],"mappings":"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","names":["sci.impl.load/handle-refer-all","the-current-ns","the-loaded-ns","include-sym?","rename-sym","only","referred","cljs.core/set","cljs.core.reduce","p__40179","vec__40180","cljs.core.nth","ns","k","v","and__5043__auto__","cljs.core/Symbol","cljs.core/not","cljs.core/contains?","cljs.core.assoc","sci.impl.load/handle-js-lib","env","opts","lib","cnn","the-lib","path","js/Reflect.get","clazz","cljs.core.symbol","cljs.core/munge","cljs.core/assoc-in","temp__5802__auto__","alias","refers","rename","refer","sub-sym","the-sublib","cljs.core.get","sci.impl.load/lib+path","clojure.string.split","cljs.core/re-pattern","p__40282","map__40283","cljs.core/--destructure-map","as","refer-macros","exclude","use","sci.impl.load/handle-require-libspec-env","_ctx","current-ns","lib-name","or__5045__auto__","vec__40284","cljs.core.get_in","sym","cljs.core/identity","excludes","cljs.core/constantly","cljs.core/coll?","cljs.core.into","cljs.core/keyword-identical?","cljs.core/sequential?","vec__40303","_k","cljs.core/find","js/Error","temp__5804__auto__","on-loaded","G__40321","cljs.core/meta","G__40322","sci.impl.load/add-loaded-lib","cljs.core.swap_BANG_","loaded-libs","loaded-libs-var","cljs.core/deref","cljs.core/conj","cljs.core.update","cljs.core.conj","sci.impl.load/handle-require-libspec","ctx","env*","sci.impl.utils/current-ns-name","js-lib?","vec__40398","as-alias","cljs.core/reset!","map__40402","reload","reload-all","namespaces","reload*","loading","cljs.core/nat-int?","sci.impl.utils.throw_error_with_location","lib-emphasized","cljs.core.replace","clojure.string.join","cljs.core._EQ_","load-fn","curr-ns","sci.impl.utils/current-ns","map__40448","file","source","handled","G__40444","sci.impl.types/getName","e40450","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.utils/current-file","fexpr__40460","sci.impl.utils/eval-string*","e","cljs.core/update","cljs.core/dissoc","sci.impl.load/load-lib*","prefix","options","cljs.core/name","cljs.core.apply","cljs.core/hash-map","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.load/load-lib","seq40484","G__40485","cljs.core/first","cljs.core/next","G__40486","G__40487","self__5754__auto__","sci.impl.load/prependss","x","coll","cljs.core/cons","cljs.core.concat","sci.impl.load/libspec?","cljs.core/vector?","cljs.core/second","cljs.core/Keyword","sci.impl.load/load-libs","kw","args","args*","flags","cljs.core.filter","cljs.core/keyword?","cljs.core.interleave","cljs.core.repeat","cljs.core/complement","supported","unsupported","cljs.core/seq","cljs.core.remove","cljs.core/str","cljs.core.interpose","seq__40545","chunk__40546","count__40547","i__40548","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","arg","vec__40749","seq__40750","first__40751","vec__40762","seq__40763","first__40764","seq__40755","chunk__40756","count__40757","i__40758","seq__40765","chunk__40766","count__40767","i__40768","sci.impl.load/eval-require","seq40827","G__40828","sci.impl.load/eval-require-macros","seq40855","G__40856","cljs.core/vreset!","sci.impl.utils/eval-require-state","sci.impl.load/eval-use","seq40860","G__40861","sci.impl.utils/eval-use-state","sci.impl.load/eval-refer-clojure","exprs","ns-sym","vec__40867","G__40874","cljs.core.update_in","cljs.core.fnil","cljs.core/into","other-ns","other-vars","cljs.core/select-keys","cljs.core/merge","p__40878","vec__40879","acc","original-name","new-name","cljs.core/nnext","sci.impl.load/eval-refer*","filters","fs","public-keys","cljs.core/symbol?","cljs.core/keys","to-do","_","sci.impl.load/eval-refer","seq40890","G__40891","G__40892","sci.impl.utils/eval-refer-state"],"sourcesContent":["(ns sci.impl.load\n  {:no-doc true}\n  (:require\n   [clojure.string :as str]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [kw-identical? throw-error-with-location]]\n   [sci.impl.vars :as vars]))\n\n(defn handle-refer-all [the-current-ns the-loaded-ns include-sym? rename-sym only]\n  (let [referred (:refers the-current-ns)\n        only (when only (set only))\n        referred (reduce (fn [ns [k v]]\n                           (if (and (symbol? k) (include-sym? k)\n                                    (or (not only)\n                                        (contains? only k)))\n                             (assoc ns (rename-sym k) v)\n                             ns))\n                         referred\n                         the-loaded-ns)]\n    (assoc the-current-ns :refers referred)))\n\n#?(:cljs\n   (defn handle-js-lib [env opts lib cnn the-lib]\n     (let [path (:path opts)\n           the-lib (if path\n                     (reduce (fn [the-lib path]\n                               (js/Reflect.get the-lib path)) the-lib (.split path \".\"))\n                     the-lib)\n           clazz (symbol (munge (str lib (when path\n                                           (str \"$\")) path)))\n           env (-> env\n                   (assoc-in [:class->opts clazz :class] the-lib)\n                   (assoc-in [:raw-classes clazz] the-lib))\n           env (if-let [alias (:as opts)]\n                 (assoc-in env [:namespaces cnn :imports alias] clazz)\n                 env)\n           env (if-let [refers (:refer opts)]\n                 (let [rename (:rename opts)]\n                   (reduce (fn [env refer]\n                             (let [sub-sym (symbol (str lib \"$$\" (str refer)))\n                                   the-sublib (js/Reflect.get the-lib (str refer))\n                                   refer (get rename refer refer)]\n                               (-> env\n                                   (assoc-in [:namespaces cnn :imports refer] sub-sym)\n                                   (assoc-in [:class->opts sub-sym :class] the-sublib)\n                                   (assoc-in [:raw-classes sub-sym] the-sublib))))\n                           env refers))\n                 env)]\n       env)))\n\n#?(:cljs\n   (defn lib+path [lib]\n     (str/split lib (re-pattern \"\\\\$\") 2)))\n\n(defn handle-require-libspec-env\n  [_ctx env current-ns the-loaded-ns lib-name\n   {:keys [:as :refer #?(:cljs :refer-macros) :rename :exclude :only :use] :as #?(:clj _opts :cljs opts)}]\n  (or\n   #?(:cljs\n      (when (string? lib-name)\n        (let [[lib-name path] (lib+path lib-name)]\n          (if-let [the-lib (get (:js-libs env) lib-name)]\n            (handle-js-lib env (assoc opts :path path) lib-name current-ns the-lib)\n            env))))\n   (let [the-current-ns (get-in env [:namespaces current-ns]) ;; = ns-data?\n         the-current-ns (if as (assoc-in the-current-ns [:aliases as] lib-name)\n                            the-current-ns)\n         rename-sym (if rename (fn [sym] (or (rename sym) sym))\n                        identity)\n         include-sym? (if exclude\n                        (let [excludes (set exclude)]\n                          (fn [sym]\n                            (not (contains? excludes sym))))\n                        (constantly true))\n         #?@(:cljs [refer (if refer-macros\n                            (if (or (nil? refer)\n                                    (coll? refer))\n                              (into refer refer-macros)\n                              ;; assume :all\n                              refer)\n                            refer)])\n         the-current-ns\n         (cond refer\n               (cond (or (kw-identical? :all refer)\n                         use)\n                     (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym nil)\n                     (sequential? refer)\n                     (let [referred (:refers the-current-ns)\n                           referred (reduce (fn [ns sym]\n                                              (if (include-sym? sym)\n                                                (assoc ns (rename-sym sym)\n                                                       (if-let [[_k v] (find the-loaded-ns sym)]\n                                                         v\n                                                         (throw (new #?(:clj Exception :cljs js/Error)\n                                                                     (str sym \" does not exist\")))))\n                                                ns))\n                                            referred\n                                            refer)]\n                       (assoc the-current-ns :refers referred))\n                     :else (throw (new #?(:clj Exception :cljs js/Error)\n                                       (str \":refer value must be a sequential collection of symbols\"))))\n               use (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym only)\n               :else the-current-ns)\n         env (assoc-in env [:namespaces current-ns] the-current-ns)]\n     (when-let [on-loaded (some-> the-loaded-ns :obj meta :sci.impl/required-fn)]\n       (on-loaded {}))\n     env)))\n\n(defn add-loaded-lib [env lib]\n  (swap! env (fn [env]\n               (let [loaded-libs (:loaded-libs env)]\n                 (if (contains? loaded-libs lib)\n                   env\n                   (do\n                     (let [loaded-libs-var (get-in env '[:namespaces clojure.core *loaded-libs*])]\n                       #?(:clj\n                          (dosync (alter @loaded-libs-var conj lib))\n                          :cljs\n                          (swap! @loaded-libs-var conj lib)))\n                     (-> (update env :loaded-libs\n                                 (fn [loaded-libs]\n                                   (if (nil? loaded-libs)\n                                     #{lib}\n                                     (conj loaded-libs lib))))))))))\n  nil)\n\n(defn handle-require-libspec\n  [ctx lib opts]\n  (let [env* (:env ctx)\n        env @env*\n        cnn (utils/current-ns-name)\n        lib (get (:ns-aliases env) lib lib)\n        #?@(:cljs [js-lib? (string? lib)])]\n    (or #?(:cljs\n           (when js-lib?\n             (let [[lib path] (lib+path lib)]\n               (when-let [the-lib (get (:js-libs env) lib)]\n                 (swap! env* (fn [env]\n                               (handle-js-lib env (assoc opts :path path) lib cnn the-lib)))\n                 {}))))\n        (if-let [as-alias (:as-alias opts)]\n          (reset! env* (handle-require-libspec-env ctx env cnn nil lib {:as as-alias}))\n          (let [{:keys [:reload :reload-all]} opts\n                namespaces (get env :namespaces)\n                reload* (or reload reload-all (:reload-all ctx))]\n            (if-let [the-loaded-ns (when-not reload* (get namespaces lib))]\n              (let [loading (:loading ctx)]\n                (if (and loading\n                         (not (contains? (:loaded-libs env) lib))\n                         (nat-int? #?(:clj (.indexOf ^clojure.lang.PersistentVector loading lib)\n                                      :cljs (.indexOf loading lib))))\n                  (throw-error-with-location\n                   (let [lib-emphasized (str \"[ \" lib \" ]\")\n                         loading (conj loading lib)\n                         loading (replace {lib lib-emphasized} loading)]\n                     (str \"Cyclic load dependency: \" (str/join \"->\" loading)))\n                   lib)\n                  (when-not (= lib cnn)\n                    (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts)))))\n              (if-let [load-fn (:load-fn env)]\n                (let [curr-ns @utils/current-ns]\n                  (if-let [{:keys [file source handled]}\n                           (load-fn {:namespace lib ;; old name\n                                     :libname lib\n                                     :ctx ctx\n                                     :opts opts\n                                     :ns (types/getName curr-ns)\n                                     :reload (or reload reload-all)})]\n                    (do\n                      ;; (.println System/err \"source\")\n                      ;; (.println System/err source)\n                      (let [ctx (-> ctx\n                                    (assoc :bindings {})\n                                    (assoc :reload-all reload-all)\n                                    (update :loading (fn [loading]\n                                                       (if (nil? loading)\n                                                         [lib]\n                                                         (conj loading lib)))))]\n                        (when source\n                          (try (vars/with-bindings\n                                 {utils/current-ns curr-ns\n                                  utils/current-file file}\n                                 (@utils/eval-string* ctx source))\n                               (catch #?(:clj Exception :cljs js/Error) e\n                                 (swap! env* update :namespaces dissoc lib)\n                                 (throw e)))))\n                      (when-not handled\n                        (swap! env* (fn [env]\n                                      (let [namespaces (get env :namespaces)\n                                            the-loaded-ns (get namespaces lib)]\n                                        (handle-require-libspec-env ctx env cnn\n                                                                    the-loaded-ns\n                                                                    lib opts))))))\n                    (or (when reload*\n                          (when-let [the-loaded-ns (get namespaces lib)]\n                            (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n                        (throw (new #?(:clj Exception :cljs js/Error)\n                                    (str \"Could not find namespace: \" lib \".\"))))))\n                (throw (new #?(:clj Exception :cljs js/Error)\n\n                            (str \"Could not find namespace \" lib \".\")))))\n            #?(:clj (add-loaded-lib env* lib)\n               :cljs (when-not js-lib?\n                       (add-loaded-lib env* lib)))\n            nil)))))\n\n(defn load-lib* [ctx prefix lib options]\n  (when (and prefix (pos? (.indexOf (name lib) #?(:clj (int \\.)\n                                                  :cljs \\.))))\n    (throw-error-with-location (str \"Found lib name '\" (name lib) \"' containing period with prefix '\"\n                                    prefix \"'.  lib names inside prefix lists must not contain periods\")\n                               lib))\n  (let [lib (if prefix (symbol (str prefix \\. lib)) lib)\n        opts (apply hash-map options)]\n    (handle-require-libspec ctx lib opts)))\n\n#?(:clj\n   (let [load-lock (Object.)]\n     (defn load-lib [ctx prefix lib & options]\n       (locking load-lock\n         (load-lib* ctx prefix lib options))))\n   :cljs\n   (defn load-lib [ctx prefix lib & options]\n     (load-lib* ctx prefix lib options)))\n\n(defn- prependss\n  \"Prepends a symbol or a seq to coll\"\n  [x coll]\n  (if (symbol? x)\n    (cons x coll)\n    (concat x coll)))\n\n(defn- libspec?\n  \"Returns true if x is a libspec\"\n  [x]\n  (or (symbol? x)\n      (and (vector? x)\n           (or\n            (nil? (second x))\n            (keyword? (second x))))))\n\n(defn- load-libs\n  \"Loads libs, evaling libspecs, prefix lists, and flags for\n  forwarding to load-lib\"\n  [ctx kw args]\n  (let [args* (cons kw args)\n        flags (filter keyword? args*)\n        opts (interleave flags (repeat true))\n        args* (filter (complement keyword?) args*)]\n    ;; check for unsupported options\n    (let [supported #{:as :reload :reload-all :require :use :verbose :refer #?(:cljs :require-macros)}\n          unsupported (seq (remove supported flags))]\n      (when unsupported\n        (throw-error-with-location (apply str \"Unsupported option(s) supplied: \"\n                                          (interpose \\, unsupported))\n                                   ;; best effort location\n                                   args)))\n    ;; check a load target was specified\n    (when-not (seq args*)\n      (throw-error-with-location \"Nothing specified to load\"\n                                 args))\n    (doseq [arg args*]\n      (if (libspec? arg)\n        (apply load-lib ctx nil (prependss arg opts))\n        (let [[prefix & args*] arg]\n          (when (nil? prefix)\n            (throw-error-with-location \"prefix cannot be nil\"\n                                       args))\n          (doseq [arg args*]\n            (apply load-lib ctx prefix (prependss arg opts))))))))\n\n(defn eval-require\n  [ctx & args]\n  (load-libs ctx :require args))\n\n(defn eval-require-macros\n  [ctx & args]\n  (load-libs ctx :require-macros args))\n\n(vreset! utils/eval-require-state eval-require)\n\n(defn eval-use\n  [ctx & args]\n  (load-libs ctx :use args))\n\n(vreset! utils/eval-use-state eval-use)\n\n(defn eval-refer-clojure [ctx exprs]\n  (let [ns-sym 'clojure.core]\n    (loop [exprs exprs]\n      (when exprs\n        (let [[k v] exprs]\n          (case k\n            :exclude\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)]\n                       (update-in env [:namespaces cnn :refer ns-sym :exclude]\n                                  (fnil into #{}) v))))\n            :only\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           other-vars (select-keys other-ns v)]\n                       ;; TODO: this is wrong, don't merge these vars into the current namespace\n                       (update-in env [:namespaces cnn]\n                                  merge other-vars))))\n            :rename\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           namespaces (:namespaces env)\n                           the-current-ns (get namespaces cnn)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           the-current-ns\n                           (reduce (fn [acc [original-name new-name]]\n                                     (-> acc\n                                         (assoc-in [:refers new-name] (get other-ns original-name))\n                                         (update-in [:refer ns-sym :exclude] (fnil conj #{}) original-name)))\n                                   the-current-ns\n                                   v)]\n                       (assoc-in env [:namespaces cnn] the-current-ns)))))\n          (recur (nnext exprs)))))))\n\n(defn eval-refer* [env ns-sym filters]\n  (let [cnn (utils/current-ns-name)\n        namespaces (:namespaces env)\n        ns (or (get namespaces ns-sym)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"No namespace: \" ns-sym))))\n        fs (apply hash-map filters)\n        public-keys (filter symbol? (keys ns))\n        rename (or (:rename fs) {})\n        exclude (set (:exclude fs))\n        to-do (if (= :all (:refer fs))\n                public-keys\n                (or (:refer fs) (:only fs) public-keys))\n        _ (when (and to-do (not (sequential? to-do)))\n            (throw (new #?(:clj Exception :cljs js/Error)\n                        \":only/:refer value must be a sequential collection of symbols\")))\n        the-current-ns (get namespaces cnn)\n        referred (:refers the-current-ns)\n        referred (reduce (fn [referred sym]\n                           (if-not (exclude sym)\n                             (let [v (get ns sym)]\n                               (when-not v\n                                 (throw (new #?(:clj java.lang.IllegalAccessError\n                                                :cljs js/Error)\n                                             ;; TODO: handle private vars\n                                             (if false ;; (get (ns-interns ns) sym)\n                                               (str sym \" is not public\")\n                                               (str sym \" does not exist\")))))\n                               (assoc referred (or (rename sym) sym) v))\n                             referred))\n                         referred\n                         to-do)\n        the-current-ns (assoc the-current-ns :refers referred)\n        namespaces (assoc namespaces cnn the-current-ns)\n        env (assoc env :namespaces namespaces)]\n    env))\n\n(defn eval-refer\n  \"The function equivalent of :refer is handled differently than what we\n  did before (this is more like what Clojure itself does.) For\n  referring clojure.core we still use the old code.\"\n  [ctx ns-sym & filters]\n  (if (= 'clojure.core ns-sym)\n    (eval-refer-clojure ctx filters)\n    (swap! (:env ctx) eval-refer* ns-sym filters))\n  nil)\n\n(vreset! utils/eval-refer-state eval-refer)\n"]}