{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/*query-cache*","datascript.lru/cache","this__5343__auto__","k__5344__auto__","this__5345__auto__","k54784","else__5346__auto__","G__54790","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__54792","vec__54793","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__54783","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this54785","other54786","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__54797","this__5351__auto__","k__5352__auto__","pred__54798","cljs.core/keyword-identical?","expr__54799","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__54787","extmap__5385__auto__","G__54802","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k54804","G__54809","attrs","tuples","p__54810","vec__54811","G__54803","this54805","other54806","G__54816","pred__54817","expr__54818","datascript.query/Relation","G__54807","G__54821","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq54823","self__5755__auto__","xs","cljs.core/cat","G__54828","datascript.query/zip","args-arr__5794__auto__","argseq__5795__auto__","seq54825","G__54826","G__54827","self__5754__auto__","a","b","cljs.core.mapv","cljs.core/vector","rest","cljs.core.apply","cljs.core/mapv","datascript.query/same-keys?","p1__54830#","cljs.core/every?","p1__54831#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__54833","vec__54834","pattern-el","form-el","cljs.core.map","cljs.core/butlast","p__54837","vec__54838","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__5636__auto__","i","datascript.query/sum-rel","map__54843","cljs.core/--destructure-map","map__54844","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__5523__auto__","s__54846","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__54848","cljs.core/chunk-buffer","i__54847","vec__54849","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54845","cljs.core/chunk-rest","vec__54852","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__54856","chunk__54857","count__54858","i__54859","vec__54866","c__5568__auto__","cljs.core/chunk-first","vec__54870","idx-a","cljs.core.conj_BANG_","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge","cljs.core.range","G__54875","G__54876","G__54873","G__54874","G__54878","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","datascript.query/parse-rules","cljs.reader.read_string","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__5393__auto__","m__5394__auto__","datascript.query/in->rel","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","cljs.core/PROTOCOL_SENTINEL","datascript.parser/BindIgnore","_","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","cljs.core/empty?","p1__54880#","datascript.parser/BindTuple","p1__54881#","p2__54882#","p__54885","vec__54886","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__54890#","cljs.core/meta","p1__54891#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_","p1__54893#","datascript.query/hash-attrs","key-fn","hash-table","temp__5806__auto__","key","cljs.core.assoc_BANG_","cljs.core.conj","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__54896#","common-gtrs2","p1__54897#","keep-attrs1","keep-attrs2","clojure.set.difference","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__54902","map__54903","getters-b","p1__54899#","key-fn-b","getters-a","p1__54900#","key-fn-a","p1__54901#","cljs.core/filterv","G__54904","datascript.query/lookup-pattern-db","db","search-pattern","p1__54905#","datoms","datascript.db/-search","attr->prop","cljs.core.filter","p__54906","vec__54907","s","datascript.query/matches-pattern?","and__5043__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__54911#","attr->idx","p__54913","vec__54914","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__54919#","cljs.core/some","datascript.query/context-resolve-val","temp__5808__auto__","fexpr__54921","datascript.query/rel-contains-attrs?","p1__54922#","datascript.query/rel-prod-by-attrs","p1__54923#","production","p1__54924#","cljs.core.remove","datascript.query/-call-fn","f","args","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__54928","vec__54931","seq__54932","first__54933","vec__54934","pred","or__5045__auto__","datascript.built-ins/query-fns","cljs.core/symbol?","tuple-pred","p1__54927#","datascript.query/bind-by-fn","vec__54938","vec__54941","seq__54942","first__54943","vec__54944","out","datascript.parser/parse-binding","fun","tuple-fn","s__54949","b__54951","i__54950","iter__54948","val","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__54955","seq__54956","first__54957","rule","call-args","seqid","cljs.core.swap_BANG_","cljs.core/inc","branches","s__54959","b__54961","i__54960","vec__54962","seq__54963","first__54964","vec__54965","seq__54966","first__54967","iter__54958","vec__54969","seq__54970","first__54971","vec__54972","seq__54973","first__54974","branch","rule-args","clauses","replacements","p1__54954#","clojure.walk/postwalk","x__51072__auto__","cljs.core.symbol","datascript.query/remove-pairs","ys","pairs","p__54976","vec__54977","x","y","datascript.query/rule-gen-guards","rule-clause","vec__54980","seq__54981","first__54982","prev-call-args","s__54984","b__54986","i__54985","vec__54988","iter__54983","vec__54991","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__54994#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__54996","vec__54997","vec__55000","seq__55001","first__55002","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__55003#","stack","frame","vec__55023","vec__55026","seq__55027","first__55028","next-clauses","p1__55004#","cljs.core/split-with","datascript.query/-collect","vec__55029","seq__55030","first__55031","vec__55032","active-gs","pending-gs","p1__55005#","prefix-clauses","s__55037","b__55039","i__55038","iter__55036","datascript.query.concatv","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__55042","e","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec","datascript.query/dynamic-lookup-attrs","vec__55046","G__55049","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__55050#","cljs.core.keep","datascript.query/bound-vars","p1__55052#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","datascript.query/check-free-same","free","p1__55053#","cljs.core/=","datascript.query/check-free-subset","seq__55055","chunk__55056","count__55057","i__55058","cljs.core.prn","G__55066","datascript.query._resolve_clause","orig-clause","pred__55067","expr__55068","G__55070","G__55071","G__55072","G__55073","G__55075","G__55076","G__55082","G__55083","G__55087","G__55088","G__55095","G__55096","G__55101","G__55102","G__55106","G__55107","G__55111","G__55112","G__55117","G__55118","cljs.core/nfirst","vec__55077","seq__55078","first__55079","source-sym","*implicit-source*-orig-val__55080","*implicit-source*-temp-val__55081","vec__55084","seq__55085","first__55086","contexts","p1__55060#","datascript.query/resolve-clause","p1__55061#","vec__55089","seq__55090","first__55091","vec__55092","seq__55093","first__55094","req-vars","vec__55097","seq__55098","first__55099","join-context","p1__55062#","p1__55063#","sum-rel","vec__55103","seq__55104","first__55105","vec__55108","seq__55109","first__55110","negation-vars","context'","negation-context","negation","vec__55113","seq__55114","first__55115","relation","*lookup-attrs*-orig-val__55119","*lookup-attrs*-temp-val__55120","*implicit-source*-orig-val__55122","*implicit-source*-temp-val__55123","G__55124","G__55125","datascript.query/-q","*implicit-source*-orig-val__55127","*implicit-source*-temp-val__55128","G__55131","symbols","datascript.query._collect","keep-attrs","copy-map","p1__55129#","s__55134","xs__6360__auto__","iterys__5519__auto__","s__55136","b__55138","i__55137","iter__55135","fs__5520__auto__","iter__55133","cljs.core/aclone","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.built-ins/aggregates","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__55142#","vals","p1__55143#","datascript.query/idxs-of","p1__55145#","p2__55146#","cljs.core/nil?","datascript.query/aggregate","resultset","group-idxs","cljs.core/complement","group-fn","p1__55147#","grouped","s__55149","b__55151","i__55150","vec__55152","iter__55148","vec__55155","datascript.query/map*","p1__55158#","p2__55159#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","m","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__55161","b__55163","i__55162","iter__55160","datascript.parser/pull?","datascript.pull_api.parse_opts","s__55165","b__55167","i__55166","iter__55164","parsed-opts","el","datascript.pull-api/pull-impl","datascript.query/q","seq55170","G__55171","q","inputs","parsed-q","datascript.lru/-get","datascript.parser/parse-query","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__55173","datascript.parser/query->map","wheres","G__55174","p1__55169#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.built-ins :as built-ins]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru :as lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa])\n  #?(:clj\n     (:import\n      [datascript.parser BindColl BindIgnore BindScalar BindTuple\n       Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n       RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:dynamic *query-cache* (lru/cache 100))\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (or (= % '_) (free-var? %)) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (= p '_) (free-var? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins/query-fns f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins/query-fns f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                  (second clause)\n                  (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n   (cond+\n     :let [rel (first rels)]\n \n     (nil? rel) acc\n \n     ;; one empty rel means final set has to be empty\n     (empty? (:tuples rel)) []\n \n     :let [keep-attrs (select-keys (:attrs rel) symbols)]\n \n     (empty? keep-attrs) (recur acc (next rels) symbols)\n \n     :let [copy-map (to-array (map #(get keep-attrs %) symbols))\n           len      (count symbols)]\n\n     :else\n     (recur\n       (for [#?(:cljs t1\n                :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n             t2 (:tuples rel)]\n         (let [res (aclone t1)]\n           (dotimes [i len]\n             (when-some [idx (aget copy-map i)]\n               (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n           res))\n       (next rels)\n       symbols))))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-ins/aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     (let [db (-context-resolve (:source find) context)\n                           pattern (-context-resolve (:pattern find) context)]\n                       (dpa/parse-opts db pattern))))]\n    (for [tuple resultset]\n      (mapv\n        (fn [parsed-opts el]\n          (if parsed-opts\n            (dpa/pull-impl parsed-opts el)\n            el))\n        resolved\n        tuple))))\n\n(defn q [q & inputs]\n  (let [parsed-q      (lru/-get *query-cache* q #(dp/parse-query q))\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find (:qreturn-map parsed-q)))))\n"]}