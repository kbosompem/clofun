{"version":3,"sources":["promesa/util.cljc"],"mappings":";AAuEA;;;;uBAAA,vBAAMA,sDAGHC,GAAGC;AAHN,AAIE,kBAAKC,EAAEC;AAAP,AACE,oBAAIA;AAAE,QAACF,mCAAAA,sCAAAA,LAAGE,kBAAAA;;AAAG,QAACH,mCAAAA,sCAAAA,LAAGE,kBAAAA;;;;AAErB,iCAAA,jCAAME,0EAEHC,MAAMC;AAFT,AAGE,IAAMC,WAAQ,6CAAA,7CAACC,+EACK,AAACC,4CAAI,WAAKC;AAAL,AAAa,OAAkBA;IACpC,AAA4BL;AAFhD,AAGE,OAACM,0BAAUJ,SAAQD;;AAEvB,2BAAA,3BAAMM,8DAEHC;AAFH,AAGE,GAAI,AAACC,uBAAOD;AACV,OAACE,gBAAMF;;AACPA;;;AAEJ,qBAAA,rBAAMG;AAAN,AAUK,AAAA,GAAA,QAAAC,oCAAAC,yCAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,oFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,iCAAAE;;;AAAA,CAAA,AAAA,AAAAF,2EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,sEAAAG;;AAAA,CAAA,AAAA,AAAAH,yFAAA,WAEWS;;AAFX,AAAA,YAAA,RAEWA;AAFX,AAAA;;;AAAA,CAAA,AAAA,AAAAT,2FAAA,WAGaS;;AAHb,AAAA,YAAA,RAGaA;AAHb,AAAA;;;AAAA,CAAA,AAAAT,4CAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,kDAAA;;AAAA,CAAA,AAAAA,qDAAA;;AAAA,CAAA,AAAAA,0DAAA,WAAAI,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAG,wCAAA,wDAAAN;AAAA,AAAA,YAAAF,iCAAAE;;;AAAAF;;AAAA,YAAAA,iCAAA;;AAML,yBAAA,zBAAMU,0DAEHC,EAAEC;AAFL,AAGE,IAAA,AAAK,QAACD,kCAAAA,oCAAAA;gBAAN,QAAAE,JAAkDC;AAAlD,AAAoD,QAACF,yCAAAA,4CAAAA,LAASE,wBAAAA","names":["promesa.util/handler","fv","fc","v","c","promesa.util/has-method?","klass","name","methods","cljs.core.into","cljs.core.map","method","cljs.core/contains?","promesa.util/maybe-deref","o","cljs.core/delay?","cljs.core/deref","promesa.util/mutex","js/promesa","js/promesa.util","js/promesa.util.t_promesa$util46696","promesa.util/t_promesa$util46696","_46698","meta46697","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","promesa.util/->t_promesa$util46696","_","promesa.util/try*","f","on-error","e46703","e"],"sourcesContent":[";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.util\n  (:require [promesa.protocols :as pt])\n  #?(:clj\n     (:import\n      java.lang.reflect.Method\n      java.time.Duration\n      java.util.concurrent.CompletionException\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.locks.ReentrantLock\n      ;; java.util.function.BiConsumer\n      ;; java.util.function.BiFunction\n      ;; java.util.function.Consumer\n      ;; java.util.function.Function\n      ;; java.util.function.Supplier\n      )))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n#?(:clj\n   (extend-protocol clojure.core/Inst\n     Duration\n     (inst-ms* [v] (.toMillis ^Duration v))))\n\n#?(:clj\n   (deftype Supplier [f]\n     java.util.function.Supplier\n     (get [_] (f))))\n\n#?(:clj\n   (deftype Function [f]\n     java.util.function.Function\n     (apply [_ v]\n       (f v))))\n\n#?(:clj\n   (def f-identity (->Function identity)))\n\n#?(:clj\n   (defn unwrap-completion-stage\n     {:no-doc true}\n     [it]\n     (.thenCompose ^CompletionStage it\n                   ^java.util.function.Function f-identity)))\n\n#?(:clj\n   (defn unwrap-completion-exception\n     {:no-doc true}\n     [cause]\n     (if (instance? CompletionException cause)\n       (.getCause ^CompletionException cause)\n       cause)))\n\n#?(:clj\n   (deftype Function2 [f]\n     java.util.function.BiFunction\n     (apply [_ r e]\n       (f r (unwrap-completion-exception e)))))\n\n#?(:clj\n   (deftype Consumer2 [f]\n     java.util.function.BiConsumer\n     (accept [_ r e]\n       (f r (unwrap-completion-exception e)))))\n\n(defn handler\n  \"Create a handler, mainly for combine two separate functions\n  into a single callbale.\"\n  [fv fc]\n  (fn [v c]\n    (if c (fc c) (fv v))))\n\n(defn has-method?\n  {:no-doc true}\n  [klass name]\n  (let [methods (into #{}\n                      (map (fn [method] (.getName ^Method method)))\n                      (.getDeclaredMethods ^Class klass))]\n    (contains? methods name)))\n\n(defn maybe-deref\n  {:no-doc true}\n  [o]\n  (if (delay? o)\n    (deref o)\n    o))\n\n(defn mutex\n  {:no-doc true}\n  []\n  #?(:clj\n     (let [m (ReentrantLock.)]\n       (reify\n         pt/ILock\n         (-lock! [_] (.lock m))\n         (-unlock! [_] (.unlock m))))\n     :cljs\n     (reify\n       pt/ILock\n       (-lock! [_])\n       (-unlock! [_]))))\n\n\n(defn try*\n  {:no-doc true}\n  [f on-error]\n  (try (f) (catch #?(:clj Throwable :cljs :default) e (on-error e))))\n\n;; http://clj-me.cgrand.net/2013/09/11/macros-closures-and-unexpected-object-retention/\n;; Explains the use of ^:once metadata\n\n(defmacro ignoring\n  [& exprs]\n  `(try* (^:once fn* [] ~@exprs) (constantly nil)))\n\n(defmacro try!\n  [& exprs]\n  `(try* (^:once fn* [] ~@exprs) identity))\n\n"]}