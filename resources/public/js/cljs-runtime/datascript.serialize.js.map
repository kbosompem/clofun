{"version":3,"sources":["datascript/serialize.cljc"],"mappings":";AAcA,iCAAA,jCAAuBA;AACvB,oCAAA,pCAAuBC;AACvB,kCAAA,lCAAuBC;AACvB,wCAAA,xCAAuBC;AACvB,kCAAA,lCAAuBC;AAEvB,+BAAA,/BAAOC,sEAASC,IAAIC,KAAKC;AAAzB,AACE,oBAAI,AAAA,8EAAKF;AAAKC;;AAAKC;;;AAkBrB,iCAAA,jCAAOC,0EAAWC,EAAEC;AAApB,AAEW,GAAI,AAACC,uBAAiBF;AAAG,QAAaA,EAAEC;;AAAG,OAACE,4CAAIH,EAAEC;;;AAE7D,gCAAA,hCAAOG,wEAAUJ,EAAEK;AAAnB,AAEW,GAAI,AAACC,qBAAKN;AAAG,QAACA,kCAAAA,qCAAAA,LAAEK,iBAAAA;;AAAG,QAAaL,EAAEK;;;AAE7C,oCAAA,pCAAOE,gFAAQC;AAAf,AAEW,SAAI,AAACN,uBAAiBM,QAAG,AAACC,wBAAQD;;AAE7C,4BAAA,5BAAOE,gEAAMC,EAAEC;AAAf,AAMK,IAAMC,MAAI,KAAAC,MAAW,AAACC,gBAAMH;AAA5B,AACE,AAACI,+CAAO,WAAKC,IAAIC;AAAT,AAAY,CAAaL,IAAII,OAAI,CAACN,kCAAAA,qCAAAA,LAAEO,iBAAAA;;AAAI,cAAA,NAAKD;GAArD,IAA6DL;;AAC7DC;;AAEP,oCAAA,pCAAOM,gFAAcR,EAAEC;AAAvB,AAMK,IAAMC,MAAI,KAAAC,MAAW,AAACC,gBAAMH;AAA5B,AACE,AAACI,+CAAO,WAAKC,IAAIC;AAAT,AAAY,CAAaL,IAAII,OAAI,CAACN,kCAAAA,yCAAAA,TAAEM,qBAAAA,jBAAIC,qBAAAA;;AAAI,cAAA,NAAKD;GAAzD,IAAiEL;;AACjEC;;AAEP;;;uCAAA,vCAAOO,sFAEGC,GAAUC;AAFpB,AAGE,GACE,SAAA,RAAM,AAAKA;AADb;;AAAA,GAEE,iCAAA,hCAAI,AAACC,kBAAQ,AAAKF,KAAI,AAAKC;AAF7B;;AAAA,AAAA;;;;;AAKF;;;iCAAA,jCAAOE,0EAEJC;AAFH,AAGE,GAAI,AAACC,uBAAO,AAAA,mFAAOD;AAAnB;;AAEE,IAAOE,QAAM,qBAAA,rBAACC,wGAAW,AAAA,8EAAI,AAACC,gBAAM,AAAA,mFAAOJ;;AAA3C,AACE,IAAMK,OAAU,AAAC3B,4CAAIwB,MAAM,0BAAA,zBAAK,AAACZ,gBAAMY;IACjCI,OAAU,kDAAA,SAAA,3DAACC,sDAAWF;IACtBG,QAAU,+DAAA,KAAA,pEAACD,kDAASE,AAAA;IACpBC,YAAU,AAAA,8EAAI,AAACN,gBAAM,AAACO,oEAAU,AAAA,mFAAOX,IAAIM,KAAKE,MAAMb;AAH5D,AAIE,GAAI,GAAA,cAAA,bAAOe;AACT,eAAO,AAACE,mDAAMV,MAAMQ;;;;AACpB,OAACG,2BAAYX;;;;;;AAEvB,AAA0BY,iCAAUC;AAEpC,+BAAA,/BAAOC,sEAASC;AAAhB,AACE,GAAI,oCAAA,pCAACC,kCAAiBD;AACpB,OAACE,gDAAQ,+CAAA,/CAACC,6CAAKH;;AACfA;;;AAEJ;;;;;;;;;;;;;;;;;yCAAA,oDAAAI,7FAAOI,0FAgBJzB;AAhBH,AAAA,IAAAsB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAgBcI,sIACUE;gBAjBxB,AAAAJ,4CAAAF,eAAA,vEAgBwBK,qIAEAb;AAlBxB,AAmBE,IAAMZ,QAAY,AAACH,+BAAUC;IACvB6B,YAAY,6CAAA,7CAACC,gFAAQ,AAACC,4CAAIC,iBAAO9B,MAAM,AAAC+B;IACxCC,YAAY,AAACC,yBAAU,qBAAA,rBAAChC;IACxBiC,eAAY,AAACD,yBAAU,qBAAA,rBAAChC;IACxBkC,WAAY,WAAKC;AAAL,AACE,IAAM9C,MAAI,iBAAA+C,mBACE,4CAAA,AAAAC,5CAAChB,4DAAKY,cAAQE;AADhB,AAAA,oBAAAC;AAAAA;;AAEE,IAAME,WAAS,yDAAA,mDAAA,5GAAQP,4GAAAA,nDAAKtB,mGAAM0B;IAC5B9C,MAAS,6BAAA,5BAAK,AAACF,gBAAMmD;AAD3B,AAEE,4DAAA,oDAAA,hHAAQL,gHAAAA,pDAAQM,uGAAOJ,GAAG9C;;AAC1BA;;;AALd,AAME,QAAO3B,AAAA,IAAU2B;;IACjCmD,cAAY,WAAKC;AAAL,AAAQ,QAAO9E,AAAA,IAAa,CAAC4D,0CAAAA,6CAAAA,LAAUkB,yBAAAA;;IACnDC,UAAY,WAAKD;AAAL,AACE,GACE,OAASA;AAAIA;;AADf,GAIE,OAASA;AACT,GACE,CAAA,aAAUA;AAAI,QAAO7E,AAAA;;AADvB,GAEE,CAAA,cAAW6E;AAAG,QAAO5E,AAAA;;AAFvB,oBAGiC,AAAC8E,MAASF;AAAI,QAAO3E,AAAA;;AAHtD,AAIQ2E;;;;;;AATV,GAWE,AAACG,yBAASH;AAAGA;;AAXf,GAYE,cAAAI,bAAUJ;AAAG,OAACP,SAASO;;AAZzB,AAae,OAACD,YAAYC;;;;;;;IAC1CK,OAAY,AAACvD,kCACC,WAAKF,IAAWjB;AAAhB,AACE,AAAkBA,kDAAEiB;;AACpB,IAAM0D,IAAG,AAAK3E;IACRQ,IAAG,iBAAAoE,WAAW,AAAK5E;AAAhB,AAAA,0FAAA4E,gCAAAA,lHAACtB,0CAAAA,oDAAAA;;IACJe,IAAG,AAACC,QAAQ,AAAKtE;IACjB6E,KAAG,CAAG,AAAM7E,OAAG8E,AAAA;AAHrB,AAIE,QAAOH,EAAEnE,EAAE6D,EAAEQ;GACjB,AAAA,mFAAOpD;IACrBsD,OAAY,AAAC5D,kCAAa,WAAK6D,EAAShF;AAAd,AAAiB,OAAkBA;GAAI,AAAA,mFAAOyB;IACxEwD,OAAY,AAAC9D,kCAAa,WAAK6D,EAAShF;AAAd,AAAiB,OAAkBA;GAAI,AAAA,mFAAOyB;IACxEyD,SAAY,iBAAAC,WAAW,AAAA,wFAAS1D;AAApB,AAAA,0FAAA0D,gCAAAA,lHAAChC,0CAAAA,oDAAAA;;IACbxB,YAAY,AAACjB,0BAAK0C,UAAUzB;IAC5ByD,MAAY,AAAC1E,0BAAK0C,UAAU,2BAAA,AAAAa,3BAAC3B,2CAAaqB;AAzChD,AA0CI,QAAA,gHAAA,kBAAA,uGAAA,oGAAA,gBAAA,kBAAA,eAAA,YAAA,YAAA,9YACa,AAAC5C,gBAAM,AAAA,mFAAOU,WACdqD,AAAA,sBACA,AAAA,yFAAUrD,aACV,AAAA,uFAASA,aACTyD,eACAvD,qBACAyD,WACAV,YACAK,YACAE;;AAQhB,AAAA,oCAAA,4CAAAI,hFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kEAAA,lEAAMD,6EACF9D;AADJ,AACQ,iDAAA,1CAACyB,uCAAkBzB;;;AAD3B,CAAA,kEAAA,lEAAM8D,6EAEF9D,GAAGgE;AAFP,AAEa,OAACvC,uCAAkBzB,GAAGgE;;;AAFnC,CAAA,4DAAA,5DAAMF;;AAAN,AAIH,AAAA,yCAAA,iDAAAF,1FAAMM;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uEAAA,vEAAMG,kFACFG;AADJ,AAEG,iFAAA,1EAACC,qEAAkBD;;;AAFtB,CAAA,uEAAA,gBAAAF,vFAAMD,kFAGFG;AAHJ,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA7C,4BAAA6C;cAAA,AAAA5C,4CAAA4C,eAAA,rEAGiBG,gIACQE;cAJzB,AAAAjD,4CAAA4C,eAAA,rEAGyBI,gIAEAxD;AALzB,AAMG,IAAM0D,MAAS,mCAAA,nCAAC/F,8BAAS0F;IACnBZ,SAAS,iBAAAkB,WAAS,mCAAA,nCAAChG,8BAAS0F;AAAnB,AAAA,sFAAAM,8BAAAA,5GAACJ,wCAAAA,kDAAAA;;IACVhB,IAAS,iBAAAqB,eAAA,oEAAA,AAAA,wGAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,2EAAA,AAAA,8EAAA,AAAA,qBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sKAAA,AAAA,KAAA,kBAAAC,+BAAA,AAAA,AAAAA,6CAAA;AAAA,AAAA,QAAAD,6CAAAA,qDAAAA,VAAsBnB,iCAAAA;;IAC/BvD,6DAAc,mCAAA,nCAACvB,8BAAS0F,nFAAc,AAACS,6CAAKN;IAC5C/B,gEAAc,mCAAA,nCAAC9D,8BAAS0F,nFAAiB,AAACS,6CAAKN;IAC/CvB,OACW,AAAChE,0BAAK,WAAKG;AAAL,AACE,IAAM8D,IAAG,mCAAA,nCAAC5E,+BAAUc;IACdL,IAAG,AAACL,4CAAIwB,MAAM,mCAAA,nCAAC5B,+BAAUc;IACzBwD,IAAG,mCAAA,nCAACtE,+BAAUc;IACdwD,QAAG,2BAAA,2BAAA,iCAAA,rFACE,OAASA,gBAAIA,IACb,OAASA,gBAAIA,IACb,AAACG,yBAASH,IAAGA,IACb,AAAC9D,kCAAO8D,IAAG,iBAAMmC,SAAO,iCAAA,jCAACzG,+BAAUsE;AAAxB,AACE,IAAAoC,cAAOE;IAAPD,cAAUF;AAAV,AAAA,oBAAA,CAAAC,4CAAAA,8CAAAC,eAAAD,0BAAAC,7CACEpH,AAAA,yCAAAA,AAAA;AAAa,OAACa,4CAAI+D,SAAS,iCAAA,jCAACnE,+BAAUsE;;AADxC,oBAAA,CAAAoC,4CAAAA,8CAAAC,eAAAD,0BAAAC,7CAEEnH,AAAA,yCAAAA,AAAA;AAAa,IAAAqH,WAAS,iCAAA,jCAAC7G,+BAAUsE;AAApB,AAAA,sFAAAuC,8BAAAA,5GAACZ,wCAAAA,kDAAAA;;AAFhB,oBAAA,CAAAS,4CAAAA,8CAAAC,eAAAD,0BAAAC,7CAGElH,AAAA,yCAAAA,AAAA;AAHF;;AAAA,oBAAA,CAAAiH,4CAAAA,8CAAAC,eAAAD,0BAAAC,7CAIEjH,AAAA,yCAAAA,AAAA;AAJF;;AAAA,oBAAA,CAAAgH,4CAAAA,8CAAAC,eAAAD,0BAAAC,7CAKEhH,AAAA,yCAAAA,AAAA;AALF;;AAME,MAAA,AAAAmH,gDAAA,CAAA,2BAAA,AAAAC,qHAAA,OAAA,AAAAA,wOAAA,2CAAA,uDAAA,8DAAA,5ZAAkCN,4HAAc,AAACM,wGAAOzC,8OAC5BA;;;;;;KAZ7C,AAaO,kBAAA,AAAAwC,gDAAA,CAAA,yBAAA,AAAAC,gIAAA,KAAA,AAAAA,8NAAA,cAAA,2CAAA,uDAAA,8DAAA,zaAAgC,AAACC,eAAK1C,sHAAQ,AAACyC,wGAAOzC,kPAC1BA;;IACtCQ,KAAG,CAAGsB,MAAI,mCAAA,nCAACpG,+BAAUc;AAlB3B,AAmBE,OAACmB,kDAAS2C,EAAEnE,EAAE6D,MAAEQ;GArBvB,mCAAA,nCAACzE,8BAAS0F;IAuBxBf,OAAS,iBAAAiC,WAAS,mCAAA,nCAAC5G,8BAAS0F;AAAnB,AAAA,GAAA,CAAAkB,YAAA;AAAA;;AAAgC,iCAAA,WAAAC,rCAACvG;AAAD,AAAO,aAAAuG,LAAavC;GAApBsC;;;IACzC/B,OAAS,iBAAAiC,WAAS,mCAAA,nCAAC9G,8BAAS0F;AAAnB,AAAA,GAAA,CAAAoB,YAAA;AAAA;;AAAgC,iCAAA,WAAAC,rCAACzG;AAAD,AAAO,aAAAyG,LAAazC;GAApBwC;;;AA7B/C,AA8BE,gCAAA,wCAAA,0DAAA,yDAAA,oDAAA,qDAAA,qDAAA,2DAAA,qDAAA,iEAAA,uEAAA,1kBAACE,woBACiBlC,8cACA,iBAAAmC,WAAc,AAACG,uGAAMC,AAAA,sSAAmBvC,vjBACxC,AAACwC,kDAAsBC,8BAAmBjD,1SAC1C,AAACgD,kDAAsBE,8BAAmB7C,MAC1C,AAAC2C,kDAAsBG,8BAAmB5C,MAC1C,mCAAA,nCAAC7E,8BAAS0F,zSACV,mCAAA,nCAAC1F,8BAAS0F,6YACV,qBAAA,rBAACgC,5BACD,qBAAA,rBAACA,lWACD,6CAAA,7CAACC;IARDT,eAAA,4DAAA,AAAA,wFAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,2EAAA,AAAA,8DAAA,AAAA,qBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sKAAA,AAAA,wXAAA,kBAAAC,uBAAA,AAAA,AAAAA,qCAAA;AAAA,AAAA,QAAAD,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;;AAtCvB,CAAA,iEAAA,jEAAM1B;;AAAN","names":["datascript.serialize/marker-kw","datascript.serialize/marker-other","datascript.serialize/marker-inf","datascript.serialize/marker-minus-inf","datascript.serialize/marker-nan","datascript.serialize/if-cljs","env","then","else","datascript.serialize/array-get","d","i","cljs.core/array?","cljs.core.nth","datascript.serialize/dict-get","k","cljs.core/map?","datascript.serialize/array?","a","cljs.core/vector?","datascript.serialize/amap","f","xs","arr","js/Array","cljs.core/count","cljs.core.reduce","idx","x","datascript.serialize/amap-indexed","datascript.serialize/attr-comparator","d1","d2","cljs.core/compare","datascript.serialize/all-attrs","db","cljs.core/empty?","attrs","cljs.core/transient","cljs.core/first","attr","left","datascript.db.datom","right","datascript.db/emax","next-attr","me.tonsky.persistent_sorted_set.slice","cljs.core.conj_BANG_","cljs.core/persistent!","datascript.serialize/freeze-kw","cljs.core/str","datascript.serialize/thaw-kw","s","clojure.string/starts-with?","cljs.core.keyword","cljs.core.subs","p__52294","map__52295","cljs.core/--destructure-map","cljs.core.get","datascript.serialize/serializable-impl","freeze-fn","freeze-kw","cljs.core/pr-str","attrs-map","cljs.core.into","cljs.core.map","cljs.core/vector","cljs.core.range","*kws","cljs.core/volatile!","*kw-map","write-kw","kw","or__5045__auto__","cljs.core/deref","keywords","cljs.core.assoc_BANG_","write-other","v","write-v","js/isNaN","cljs.core/boolean?","cljs.core/Keyword","eavt","e","G__52301","tx","datascript.db/tx0","aevt","_","avet","schema","G__52303","kws","var_args","G__52337","datascript.serialize/serializable","js/Error","opts","G__52382","datascript.serialize/from-serializable","p__52388","map__52390","from","datascript.serialize.from_serializable","thaw-fn","thaw-kw","clojure.edn/read-string","tx0","G__52393","fexpr__52396","datascript.db/validate-schema","cljs.core.mapv","marker","pred__52405","expr__52406","cljs.core/==","G__52408","cljs.core.ex_info","cljs.core.pr_str","cljs.core/type","G__52415","p1__52377#","G__52418","p1__52378#","datascript.db/map->DB","G__52430","fexpr__52429","datascript.db/rschema","cljs.core.merge","datascript.db/implicit-schema","me.tonsky.persistent-sorted-set/from-sorted-array","datascript.db/cmp-datoms-eavt","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.lru/cache","cljs.core.atom"],"sourcesContent":["(ns datascript.serialize\n  (:refer-clojure :exclude [amap array?])\n  (:require\n   [clojure.edn :as edn]\n   [clojure.string :as str]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+] #?@(:cljs [:refer [Datom]])]\n   [datascript.lru :as lru]\n   [me.tonsky.persistent-sorted-set :as set]\n   [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.serialize :refer [array dict]]))\n  #?(:clj\n     (:import\n      [datascript.db Datom])))\n\n(def ^:const ^:private marker-kw 0)\n(def ^:const ^:private marker-other 1)\n(def ^:const ^:private marker-inf 2)\n(def ^:const ^:private marker-minus-inf 3)\n(def ^:const ^:private marker-nan 4)\n\n(defn- if-cljs [env then else]\n  (if (:ns env) then else))\n\n#?(:clj\n   (defmacro array\n     \"Platform-native array representation (java.util.List on JVM, Array on JS)\"\n     [& args]\n     (if-cljs &env\n       (list* 'js* (str \"[\" (str/join \",\" (repeat (count args) \"~{}\")) \"]\") args)\n       (vec args))))\n\n#?(:clj\n   (defmacro dict\n     \"Platform-native dictionary representation (java.util.Map on JVM, Object on JS)\"\n     [& args]\n     (if-cljs &env\n       (list* 'js* (str \"{\" (str/join \",\" (repeat (/ (count args) 2) \"~{}:~{}\")) \"}\") args)\n       `(array-map ~@args))))\n\n(defn- array-get [d i]\n  #?(:clj  (.get ^java.util.List d (int i))\n     :cljs (if (cljs.core/array? d) (arrays/aget d i) (nth d i))))\n\n(defn- dict-get [d k]\n  #?(:clj  (.get ^java.util.Map d k)\n     :cljs (if (map? d) (d k) (arrays/aget d k))))\n\n(defn- array? [a]\n  #?(:clj  (instance? java.util.List a)\n     :cljs (or (cljs.core/array? a) (vector? a))))\n\n(defn- amap [f xs]\n  #?(:clj\n     (let [arr (java.util.ArrayList. (count xs))]\n       (reduce (fn [idx x] (.add arr (f x)) (inc idx)) 0 xs)\n       arr)\n     :cljs\n     (let [arr (js/Array. (count xs))]\n       (reduce (fn [idx x] (arrays/aset arr idx (f x)) (inc idx)) 0 xs)\n       arr)))\n\n(defn- amap-indexed [f xs]\n  #?(:clj\n     (let [arr (java.util.ArrayList. (count xs))]\n       (reduce (fn [idx x] (.add arr (f idx x)) (inc idx)) 0 xs)\n       arr)\n     :cljs\n     (let [arr (js/Array. (count xs))]\n       (reduce (fn [idx x] (arrays/aset arr idx (f idx x)) (inc idx)) 0 xs)\n       arr)))\n\n(defn- attr-comparator\n  \"Looks for a datom with attribute exactly bigger than the given one\"\n  [^Datom d1 ^Datom d2]\n  (cond \n    (nil? (.-a d2)) -1\n    (<= (compare (.-a d1) (.-a d2)) 0) -1\n    true 1))\n\n(defn- all-attrs\n  \"All attrs in a DB, distinct, sorted\"\n  [db]\n  (if (empty? (:aevt db))\n    []\n    (loop [attrs (transient [(:a (first (:aevt db)))])]\n      (let [attr      (nth attrs (dec (count attrs)))\n            left      (db/datom 0 attr nil)\n            right     (db/datom db/emax nil nil)\n            next-attr (:a (first (set/slice (:aevt db) left right attr-comparator)))]\n        (if (some? next-attr)\n          (recur (conj! attrs next-attr))\n          (persistent! attrs))))))\n\n(def ^{:arglists '([kw])} freeze-kw str)\n\n(defn- thaw-kw [s]\n  (if (str/starts-with? s \":\")\n    (keyword (subs s 1))\n    s))\n\n(defn- serializable-impl\n  \"Serialized structure breakdown:\n\n   count    :: number    \n   tx0      :: number\n   max-eid  :: number\n   max-tx   :: number\n   schema   :: freezed :schema\n   attrs    :: [keywords ...]\n   keywords :: [keywords ...]\n   eavt     :: [[e a-idx v dtx] ...]\n   a-idx    :: index in attrs\n   v        :: (string | number | boolean | [0 <index in keywords>] | [1 <freezed v>])\n   dtx      :: tx - tx0\n   aevt     :: [<index in eavt> ...]\n   avet     :: [<index in eavt> ...]\"\n  [db {:keys [freeze-fn freeze-kw]\n       :or   {freeze-fn pr-str\n              freeze-kw freeze-kw}}]\n  (let [attrs       (all-attrs db)\n        attrs-map   (into {} (map vector attrs (range)))\n        *kws        (volatile! (transient []))\n        *kw-map     (volatile! (transient {}))\n        write-kw    (fn [kw]\n                      (let [idx (or\n                                  (get @*kw-map kw)\n                                  (let [keywords (vswap! *kws conj! kw)\n                                        idx      (dec (count keywords))]\n                                    (vswap! *kw-map assoc! kw idx)\n                                    idx))]\n                        (array marker-kw idx)))\n        write-other (fn [v] (array marker-other (freeze-fn v)))\n        write-v     (fn [v]\n                      (cond\n                        (string? v)  v\n                        #?@(:clj [(ratio? v) (write-other v)])\n                        \n                        (number? v)  \n                        (cond\n                          (== ##Inf v)  (array marker-inf)\n                          (== ##-Inf v) (array marker-minus-inf)\n                          #?(:clj (Double/isNaN v) :cljs (js/isNaN v)) (array marker-nan)\n                          :else v)\n\n                        (boolean? v) v\n                        (keyword? v) (write-kw v)\n                        true         (write-other v)))\n        eavt        (amap-indexed\n                      (fn [idx ^Datom d]\n                        (db/datom-set-idx d idx)\n                        (let [e  (.-e d)\n                              a  (attrs-map (.-a d))\n                              v  (write-v (.-v d))\n                              tx (- (.-tx d) db/tx0)]\n                          (array e a v tx)))\n                      (:eavt db))\n        aevt        (amap-indexed (fn [_ ^Datom d] (db/datom-get-idx d)) (:aevt db))\n        avet        (amap-indexed (fn [_ ^Datom d] (db/datom-get-idx d)) (:avet db))\n        schema      (freeze-fn (:schema db))\n        attrs       (amap freeze-kw attrs)\n        kws         (amap freeze-kw (persistent! @*kws))]\n      (dict\n        \"count\"    (count (:eavt db))\n        \"tx0\"      db/tx0\n        \"max-eid\"  (:max-eid db)\n        \"max-tx\"   (:max-tx db)\n        \"schema\"   schema\n        \"attrs\"    attrs\n        \"keywords\" kws\n        \"eavt\"     eavt\n        \"aevt\"     aevt\n        \"avet\"     avet)))\n\n#?(:clj\n   (let [lock (Object.)]\n     (defn serializable\n       ([db] (locking lock (serializable-impl db {})))\n       ([db opts] (locking lock (serializable-impl db opts)))))\n   :cljs\n   (defn serializable\n     ([db] (serializable-impl db {}))\n     ([db opts] (serializable-impl db opts))))\n\n(defn from-serializable\n  ([from] \n   (from-serializable from {}))\n  ([from {:keys [thaw-fn thaw-kw]\n          :or   {thaw-fn edn/read-string\n                 thaw-kw thaw-kw}}]\n   (let [tx0      (dict-get from \"tx0\")\n         schema   (thaw-fn (dict-get from \"schema\"))\n         _        (#'db/validate-schema schema)\n         attrs    (->> (dict-get from \"attrs\") (mapv thaw-kw))\n         keywords (->> (dict-get from \"keywords\") (mapv thaw-kw))\n         eavt     (->> (dict-get from \"eavt\")\n                    (amap (fn [arr]\n                            (let [e  (array-get arr 0)\n                                  a  (nth attrs (array-get arr 1))\n                                  v  (array-get arr 2)\n                                  v  (cond\n                                       (number? v)  v\n                                       (string? v)  v\n                                       (boolean? v) v\n                                       (array? v) (let [marker (array-get v 0)]\n                                                    (condp == marker\n                                                      marker-kw    (nth keywords (array-get v 1))\n                                                      marker-other (thaw-fn (array-get v 1))\n                                                      marker-inf   ##Inf\n                                                      marker-minus-inf ##-Inf\n                                                      marker-nan   ##NaN\n                                                      (raise \"Unexpected value marker \" marker \" in \" (pr-str v)\n                                                        {:error :serialize :value v})))\n                                       true (raise \"Unexpected value type \" (type v) \" (\" (pr-str v) \")\"\n                                              {:error :serialize :value v}))\n                                  tx (+ tx0 (array-get arr 3))]\n                              (db/datom e a v tx))))\n                    #?(:clj arrays/into-array))\n         aevt     (some->> (dict-get from \"aevt\") (amap #(arrays/aget eavt %)) #?(:clj arrays/into-array))\n         avet     (some->> (dict-get from \"avet\") (amap #(arrays/aget eavt %)) #?(:clj arrays/into-array))]\n     (db/map->DB\n       {:schema        schema\n        :rschema       (#'db/rschema (merge db/implicit-schema schema))\n        :eavt          (set/from-sorted-array db/cmp-datoms-eavt eavt)\n        :aevt          (set/from-sorted-array db/cmp-datoms-aevt aevt)\n        :avet          (set/from-sorted-array db/cmp-datoms-avet avet)\n        :max-eid       (dict-get from \"max-eid\")\n        :max-tx        (dict-get from \"max-tx\")\n        :pull-patterns (lru/cache 100)\n        :pull-attrs    (lru/cache 100)\n        :hash          (atom 0)}))))\n"]}