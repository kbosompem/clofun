{"version":3,"sources":["sci/impl/resolve.cljc"],"mappings":";AAUA,6CAAA,7CAAMA,kGAA2BC,IAAIC;AAArC,AACE,uFAAA,2CAAA,sDAAA,jLAACC,uEAAgCF,IAAIC;;AAEvC,oCAAA,pCAAME,gFACHC,IAAIC;AADP,AAEE,OAACC,kDACAF,IACA,WAAKG;AAAL,AACE,8DAAA,+DAAA,sHAAA,5OAACC,qDAAMD,wPAEcF;;;AAE1B,0CAAA,0DAAAI,pGAAMG,4FAAmBC,IAAIT;AAA7B,AAAA,IAAAM,aAAAD;gBAAA,AAAAE,4CAAAD,WAAA,IAAA,vEAAkCI;QAAlC,AAAAH,4CAAAD,WAAA,IAAA,/DAA6CK;AAA7C,AACE,IAAAC,mBAAI,CAAYC,gCAAmBb;AAAnC,AAAA,GAAAY;AAAAA;;AAAA,IAAAA,uBACI,CAAYE,iCAAoBd;AADpC,AAAA,GAAAY;AAAAA;;AAEI,IAAMF,gBAAU,AAACK,6BAAcL;IACzBM,QAAM,AAAA,sFAAQP;AADpB,AAEE,GAAU,yPAAA,vOAAIO,OAAM,EAAI,EAAK,AAACC,0BAAWN,QAAG,AAACO,cAAI,AAAA,gGAAe,AAACC,eAAKR,YAC9C,AAACS,0BAAUJ,MAAMN;AADzC;AAAA,AAGE,AAACf,2CAA0B,kDAAA,LAAKK,kCAAwBA;;;AAC1D,IAAMqB,OAAK,AAAA,mFAAOZ;AAAlB,AACE,GAAM,sEAAA,pDAAIY,MAAK,AAACD,0BAAUC,KAAKX;AAA/B,AAEE,OAACf,2CAA0B,kDAAA,LAAKK,kCAAwBA;;AAF1D;;;;;AAIV,AAAA,gCAAA,wCAAAsB,xEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMD,yEACFf,IAAIT,IAAI0B;AADZ,AACmB,uFAAA,hFAACC,4DAAQlB,IAAIT,IAAI0B;;;AADpC,CAAA,8DAAA,9DAAMF,yEAEFf,IAAIT,IAAI0B,YAAME;AAFlB,AAGG,IAAME,SAAO,iBAAAC,WAAQ,AAACC,oBAAUhC;AAAnB,AAAA,GAAA,CAAA+B,YAAA;AAAA;;AAAA,sDAAAA,/CAAwBE;;;IAC/BC,WAAS,AAACD,+CAAO,AAACE,eAAKnC;IACvBoC,MAAI,QAAA,RAAc3B;cAFxB,AAAAoB,VAGMO,0BAAKA;IACLC,MAAI,AAACC;IACLC,iBAAe,iBAAAC,WAAA,AAAA,gGAAIJ;AAAJ,AAAA,8EAAAI,0BAAAA,hGAAoBH,oCAAAA,8CAAAA;;IAEnCP,aAAO,0BAAA,RAAMA,QAAO,iBAAAlB,mBAAI,8DAAA,mFAAA,jJAAC6B,+CAAOF,6JAAyBT;AAArC,AAAA,oBAAAlB;AAAAA;;AACIkB;;KADjB;IAEPA,aAAO,AAACY,4CAAI,AAAA,+FAAaN,SAAKN,WAAOA;AAT3C,AAUE,oBAAIA;AACF,IAAAlB,mBACC,yQAAA,vQAEa,EAAI,wDAAA,AAAA,xDAAC+B,6CAAEb,0FACH,wDAAA,AAAA,xDAACa,6CAAEb,iFAClB,iBAAAlB,mBAAI,iBAAAgC,WAAQR;IAARQ,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,gGAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAwB,4CAAAA,aAAA,AAAA,zDAACF;AAAzB,AAAA,GAAA,CAAAE,gBAAA;AAAA;;AAA4C,sBAAAA,fAACC,4BAAKX;;;AAAtD,AAAA,oBAAAtB;AAAAA;;AACI,IAAAkC,qBAAa,+BAAA,gFAAA,7FAAMpB,aAAM,AAACgB,4CAAIK,0BAAWb;AAAzC,AAAA,oBAAAY;AAAA,AAAA,QAAAA,JAAWnC;AAAX,AAAA,0FACGX,IAAIW;;AADP;;;KALN;AADD,AAAA,oBAAAC;AAAAA;;AAQC,IAAAA,uBAAI,iBAAAoC,WAAQZ;IAARY,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,gGAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAwB,4CAAAA,5CAACN,yDAAIZ;AAA7B,AAAA,GAAA,CAAAkB,gBAAA;AAAA;;AAAqC,sBAAAA,fAACH,4BAAKX;;;AAA/C,AAAA,oBAAAtB;AAAAA;;AACI,oBAAUgB;AAAV;;AAAA,AACE,IAAAkB,qBAAiB,AAACI,+BAAsBzC,IAAIqB;AAA5C,AAAA,oBAAAgB;AAAA,AAAA,YAAAA,RAAWG;AAAX,AAAA,0FACGjD,IAAI,kBAAI0B,aACF,oBAAA,kKAAA,2CAAA,uGAAA,xUAACyB,uGACEF,MACe,4DAAA,5DAAQ,4CAAKf,6LAE/B,iBAAMkB,QAAM,yEAAA,sDAAA,AAAAvB,+FAAA,gDAAA,AAAAA,9QAACzB,qDAAM,AAACe,eAAKnB,2EACCqD,+IACFC;AAFxB,AAQK,IAAMC,OAAK,4DAAA,5DAAQ,4CAAKrB;IAClBsB,MAAI,AAASD;AADnB,AAEE,GAAI,CAAA,QAAMC;AACR,OAAAC,0BAAA,WAAAC,MAAAjD,QAAAkD;AAAA,AACC,OAACC,kCAAyBX,MAAMf;GAChCkB;;AACD,OAAAK,0BAAA,WAAAC,MAAAjD,QAAAkD;AAAA,AACC,OAACE,mCAA0BZ,MAAMM;GACjCH;;;;AAtBnB;;;;;;AAyBP,IAAAxC,mBAEC,iBAAAkC,qBAAkB,AAAA,sFAASP;AAA3B,AAAA,oBAAAO;AAAA,AAAA,aAAAA,TAAWgB;AAAX,AACE,OAACjB,eAAKiB,OAAO5B;;AADf;;;AAFD,AAAA,oBAAAtB;AAAAA;;AAAA,IAAAA,uBAIC,AAACiC,eAAKN,eAAevC;AAJtB,AAAA,oBAAAY;AAAAA;;AAAA,IAAAA,uBAKC,iBAAMmD,KAAG,iBAAAC,WAAQ5B;IAAR4B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,gGAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAwB,4CAAAA,aAAA,AAAA,zDAACtB;AAAzB,AAAA,GAAA,CAAAsB,gBAAA;AAAA;;AAA4C,sBAAAA,fAACnB,4BAAKX;;;AAA3D,AAEE,oBAAU,iBAAA+B,WAAQ1B;IAAR0B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,qFAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAEQ,4CAAAA,aAAA,AAAA,zDAACvB;IAFTuB,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,AAAA,0FAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAIQ,iCAAAA,1BAAC7C,uCAAUc;;;AAJ7B;;AAAA,AAKE6B;;;AAZL,AAAA,oBAAAnD;AAAAA;;AAAA,IAAAA,uBAaC,mIAAA,AAAA,mGAAA,pNAAM,+BAAA,2EAAA,xFAAMc,aAAM,AAACgB,4CAAIK,0BAAW/C,+FAC/BA,IAAIA;AAdR,AAAA,oBAAAY;AAAAA;;AAeC,oBAAUgB;AAAV;;AAAA,AACE,IAAAhB,uBACC,iBAAAkC,qBAAa,AAACI,+BAAsBzC,IAAIT;AAAxC,AAAA,oBAAA8C;AAAA,AAAA,QAAAA,JAAWoB;AAAX,AAAA,0FACGlE,IAAIkE;;AADP;;;AADD,AAAA,oBAAAtD;AAAAA;;AASI,oBAAU,AAAA,oGAAgBH;AAA1B;;AAAA,AACE,IAAAqC,qBAAa,AAACsB,gFAAyC3D,IAAIT;AAA3D,AAAA,oBAAA8C;AAAA,AAAA,QAAAA,JAAWqB;AAAX,AAAA,0FACGnE,IAAImE;;AADP;;;;;;;;;;;;AA3EhB,CAAA,wDAAA,xDAAM3C;;AAAN,AA8EA;;;kCAAA,lCAAM6C,4EAEH5D,IAAI6D,iBAAiBC;AAFxB,AAGE,IAAMC,UAAQ,AAAA,0FAAU/D;IAClBgE,SAAO,AAAAC,yCAAA,jBAAQJ,iBACA,WAAKM;AAAL,AACE,OAACC,gBACA,AAACC,+CACA,WAAAC,SAAgBG;AAAhB,AAAA,IAAAF,aAAAD;UAAA,AAAAxE,4CAAAyE,WAAA,IAAA,jEAAMC;WAAN,AAAA1E,4CAAAyE,WAAA,IAAA,lEAAUzB;AAAV,AACE,IAAM4B,UACA,AAACC,kDACAH,IAAI1B,KACJ,WAAK8B;AAAL,AACE,IAAMC,sBAAiB,iBAAA1E,mBAAI,AAAA,oFAAOyE;AAAX,AAAA,oBAAAzE;AAAAA;;AAAA;;;IAEjB2E,sBAAc,AAACnE,0BAAUkE,oBAAiBf;AAFhD,AAGE,GAAIgB;AACFF;;AACA,2DAAA,pDAACjF,8CAAMiF,4DACA,AAACjF,8CAAMkF,oBACAf,GAAG,AAACiB,gBAAMF;;;cAXrC,VAYMG,6FAASN,QACA,cAAA,cAAI5B,dAAKmC,dAAIA;AAb5B,AAcE,GAAI,AAAC/C,6CAAEsC,IAAIE;AACT,OAACQ,kBAAQF;;AACTA;;GAlBP,mFAmBEb,GACAJ,gBACD,AAACoB,8CAAM,4BAAA,3BAAG,AAACJ,gBAAMhB;GAxB7B,AAAAG,iBAAQL;IAyBfuB,cAAY,AAACpD,+CAAOgC,OAAO,4DAAA,5DAACqB,oDAAKtB,gHAAcD;AA1BrD,AA2BEsB;;AAEJ,AAAA,0BAAA,kCAAAvE,5DAAM0E;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAvE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMuE,mEACFvF,IAAIT,IAAI0B;AADZ,AACmB,iFAAA,1EAACuE,sDAAOxF,IAAIT,IAAI0B;;;AADnC,CAAA,wDAAA,xDAAMsE,mEAEFvF,IAAIT,IAAI0B,YAAwBwE;AAFpC,AAGG,IAAMvC,WAAS,QAAA,RAAclD;IACvB0F,uBAAe,QAAA,RAAc1F;AADnC,AAEE,IAAAG,mBACC,iBAAAkC,qBACW,AAACD,eAAKc,SAAS3D;AAD1B,AAAA,oBAAA8C;AAAA,AAAA,IAAAsD,aAAAtD;QAAA,AAAAvC,4CAAA6F,WAAA,IAAA,/DAAYC;QAAZ,AAAA9F,4CAAA6F,WAAA,IAAA,/DAAczF;AAAd,AAEE,IAAMV,MAAI,iBAAAW,mBAAI,AAAC8B,4CAAI,AAAA,4GAAmBjC,KAAKE;AAAjC,AAAA,oBAAAC;AAAAA;;AACI,IAAM0F,KAAG,AAAA,iGAAc7F;IACjB8D,KAAG,CAAC+B,mCAAAA,sCAAAA,LAAG3F,kBAAAA;AADb,AAEE,OAAC0D,gCAAe5D,IAAI,AAAA,0GAAmBA,KAAK8D;;;IAGtDgC,iBAAS,wCAAA,tBAAMJ,sBACJ,iBAAArD,yBAAa,iBAAA0D,WAAQH;AAAR,AAAA,GAAA,CAAAG,YAAA;AAAA;;AAAA,sBAAAA,fAAUrF;;;AAAvB,AAAA,oBAAA2B;AAAA,AAAA,QAAAA,JAAW3C;AAAX,AAGW,IAAAS,mBAAI,AAAA,wFAAUT;AAAd,AAAA,oBAAAS;AAAAA;;AACI,OAAA,2GAAmBT;;;AAJlC;;KADF;IAMTQ,QAAE,kBAAIe,aACF,AAAC3B,kCAAiBsG,EAAEpG,KACpB,iBAAMU,QAAE,iBAAA8F,WAAQ,kBAAIF,gBACF,iBAAMG,UAAQ,AAACC,iBAAO,0DAAA,AAAA,qEAAA,/HAACV,sDAAOxF;AAA9B,AACE,OAAAgD,0BAAA,WAAAC,MAAAjD,QAAAkD;AAAA,AACC,IAAMD,YAAK,AAACkD,oBAAoBF,QAAQjG,QAAIkD;IACtCkD,QAAM,AAACC,sBAAsBpD;AADnC,AAEE,OAAChB,4CAAImE,MAAM7G;GAHd;KAKF,AAAAyD,0BAAA,WAAAC,MAAAjD,QAAAkD;AAAA,AACC,QAAeA,aAAS1D;GADzB;AAPV,AAAA,oBAYEsG;AAAS,yDAAAE,yBAAA,0DAAA,rIAACvG,2DAAU6G;;AAZtBN;;;AAAR,AAaE9F;;AA3BZ,AAAA,0FA4BG0F,EAAE1F;;AA9BP;;;AADD,AAAA,oBAAAC;AAAAA;;AAgCC,IAAAkC,qBAAc,AAACnB,4DAAQlB,IAAIT,IAAI0B;AAA/B,AAAA,oBAAAoB;AAAA,AAAA,SAAAA,LAAWiB;AAAX,AACE,oBAAM,AAAA,4GAAoBtD;AAA1B,AACE,AAACD,wCAAkBC,IAAIT,IAAI+D;;AAD7B;;AAEAA;;AAHF;;;;;AArCN,CAAA,kDAAA,lDAAMiC;;AAAN,AA2CA,AAACgB,uBAAQC,sBAAajB;AAEtB,wCAAA,xCAAMkB,wFACHzG,IAAIT,IAAI0B,YAAMyF;AADjB,AAEE,IAAAvG,mBACC,AAACqF,sDAAOxF,IAAIT,IAAI0B,YAAMyF;AADvB,AAAA,oBAAAvG;AAAAA;;AAEC,IAAMwG,IAAE,AAACjF,eAAKnC;AAAd,AACE,oBAEE,iBAAAqH,oBAAK3F;AAAL,AAAA,oBAAA2F;AAAA,SACK,oCAAA,pCAACC,kCAAiBF,YAClB,gBAAA,fAAG,EAAOA;;AAFfC;;;AAFF,8FAAA,AAAA,JAKGrH;;AALH,oBAME,iBAAAqH,oBAAK3F;AAAL,AAAA,oBAAA2F;AAAA,SACK,kCAAA,lCAACE,gCAAeH,YAChB,gBAAA,fAAG,EAAOA;;AAFfC;;;AANF,8FAAA,AAAA,JASGrH;;AATH;;;;;AAYF,4CAAA,5CAAMwH,gGACH/G,IAAIT,IAAImH;AADX,AAEE,IAAMrF,SAAO,AAACE,oBAAUhC;IAClBkC,WAAS,AAACC,eAAKnC;IACfyH,WAAS,eAAA,fAAQvF;IACjBzB,UAAI,kDAAA,sEAAA,xHAACL,8CAAMK;AAHjB,AAIE,aAAA,TAAOiH;IACAD,eAASA;;AADhB,AAEE,GAAU,AAACE,uBAAOF;AAAlB;;AAAA,AACE,IAAMG,cAAY,AAAC/C,gBAAM4C;IACnBI,eAAa,AAACC,eAAKL;IACnBM,UAAQ,AAAC9F,+CAAOH,OAAO,CAAK4F,OACA,0BAAA,AAAA,IAAA,ZAAMA,8DAAYE;IAE9CI,YAAU,kBAAM,iBAAAX,oBAAK,AAACnG,cAAIY;AAAV,AAAA,GAAAuF;AACKK;;AADLL;;MAAN,mEAAA,nEAEE,AAACpF,+CAAOyF,OACAE;AAR1B,AASE,IAAAK,qBAAW,sDAAA,tDAACf,sCAAgBzG,QAAIsH,cAAcZ;AAA9C,AAAA,oBAAAc;AAAA,QAAAA,JAAStH;AAAT,AAAA,0FACG,AAACgG,iBAAOhG,GAAGkH;;AACZ,IAAAI,yBAAY,6BAAA,mEAAA,9EAAMD,WACJ,wDAAA,xDAACd,sCAAgBzG,QAAIuH,gBAAgBb;AADnD,AAAA,oBAAAc;AAAA,SAAAA,LAASC;AAAT,AAAA,0FAEG,AAACvB,iBAAOuB,IAAIL;;AACb,eAAO,4CAAKE;eAASF;;;;;;;;;;AAE7B,yCAAA,zCAAMM,0FAAuB1H,IAAIT,IAAI0B,YAAMyF;AAA3C,AAEK,IAAArE,qBAAwB,AAAC0E,0CAAoB/G,IAAIT,IAAImH;AAArD,AAAA,oBAAArE;AAAA,AAAA,IAAAsF,aAAAtF;QAAA,AAAAvC,4CAAA6H,WAAA,IAAA,/DAAYzH;eAAZ,AAAAJ,4CAAA6H,WAAA,IAAA,tEAAcX;AAAd,AACE,IAAM9G,QAAE,EAAI,AAACM,0BAAWN,IAAG,AAACkB,gBAAMlB,GAAGA;IAC/B8G,eAAS,AAACY,mDAAWZ;AAD3B,AAGE,oBAAI/F;AAAJ,0FACG1B,IAAI,oBAAA,8GAAA,2CAAA,uGAAA,pRAACmD,uGACExC,MAAE8G;;AAEV,GAAI,kBAAWa,jBAAqB3H;AAApC,0FACGX,IACA,AAAAyD,0BAAA,WAAAC,MAAAjD,QAAAkD;AAAA,AACC,OAACE,mCACA,AAAC+C,oBAAoBjG,MAAEF,QAAIkD,UAC3B8D;GACDzH;;AANJ,0FAQGA,IAAI,AAAC6D,mCAA0BlD,MAAE8G;;;;AAhB1C;;;AAuBd,AAAA,kCAAA,0CAAAnG,5EAAMkH;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/G,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAM+G,2EACF/H,IAAIT;AADR,AACa,6EAAA,MAAA,5EAACyI,8DAAehI,IAAIT;;;AADjC,CAAA,gEAAA,hEAAMwI,2EAEF/H,IAAIT,IAAI0B;AAFZ,AAEmB,yFAAA,lFAAC+G,8DAAehI,IAAIT,IAAI0B;;;AAF3C,CAAA,gEAAA,hEAAM8G,2EAGF/H,IAAIT,IAAI0B,YAAMyF;AAHlB,AAIG,OAACR,iBACA,iBAAA/F,mBAAI,AAACsG,sCAAgBzG,IAAIT,IAAI0B,YAAMyF;AAAnC,AAAA,oBAAAvG;AAAAA;;AAAA,IAAAA,uBACa,iBAAM8H,WAAS,AAACP,uCAAsB1H,IAAIT,IAAI0B,YAAMyF;AAApD,AACEuB;;AAFf,AAAA,oBAAA9H;AAAAA;;AAGI,OAACjB,2CACA,CAAA,6BAAkC,4CAAKK,eACvCA;;;;;;AAVT,CAAA,0DAAA,1DAAMwI;;AAAN","names":["sci.impl.resolve/throw-error-with-location","msg","node","sci.impl.utils.throw_error_with_location","sci.impl.resolve/mark-resolve-sym","sym","idx","cljs.core.vary_meta","m","cljs.core.assoc","p__41351","vec__41352","cljs.core.nth","sci.impl.resolve/check-permission!","ctx","check-sym","v","or__5045__auto__","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/strip-core-ns","allow","sci.impl.utils/var?","cljs.core/not","cljs.core/meta","cljs.core/contains?","deny","var_args","G__41369","sci.impl.resolve/lookup*","js/Error","call?","sci.impl.resolve.lookup_STAR_","only-var?","cljs.core/deref","sym-ns","G__41372","cljs.core/namespace","cljs.core.symbol","sym-name","cljs.core/name","env","cnn","sci.impl.utils/current-ns-name","the-current-ns","G__41373","cljs.core.get_in","cljs.core.get","cljs.core._EQ_","G__41375","cljs.core/find","temp__5804__auto__","sci.impl.utils/ana-macros","G__41377","clazz","sci.impl.interop/resolve-class","cljs.core/with-meta","stack","sci.impl.utils/current-file","sci.impl.utils/current-ns","path","len","sci.impl.types/->NodeR","this","bindings","sci.impl.interop/get-static-field","sci.impl.interop/get-static-fields","refers","kv","G__41379","G__41380","c","x","sci.impl.records.resolve_record_or_protocol_class","sci.impl.resolve/update-parents","closure-bindings","ob","parents","new-cb","cljs.core/-vreset!","cljs.core/-deref","cb","cljs.core/first","cljs.core.reduce","p__41387","vec__41388","acc","_idx","new-acc","cljs.core.update_in","entry","iden->invoke-idx","added-before?","cljs.core/count","new-res","cljs.core/pop","cljs.core/reduced","cljs.core.range","closure-idx","cljs.core.conj","G__41395","sci.impl.resolve/lookup","sci.impl.resolve.lookup","_tag","track-mutable?","vec__41400","k","oi","mutable?","G__41403","G__41405","ext-map","cljs.core/second","sci.impl.types/eval","inner","sci.impl.types/getVal","cljs.core/assoc","cljs.core/vreset!","sci.impl.utils/lookup","sci.impl.resolve/resolve-symbol*","tag","n","and__5043__auto__","clojure.string/starts-with?","clojure.string/ends-with?","sci.impl.resolve/resolve-prefix+path","segments","prefix","cljs.core/empty?","fst-segment","nxt-segments","cljs.core/next","new-sym","new-sym-2","temp__5802__auto__","v2","sci.impl.resolve/resolve-dotted-access","vec__41425","cljs.core.into_array","sci.impl.types/NodeR","G__41441","sci.impl.resolve/resolve-symbol","sci.impl.resolve.resolve_symbol","resolved"],"sourcesContent":["(ns sci.impl.resolve\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.faster :as faster]\n            [sci.impl.interop :as interop]\n            [sci.impl.records :as records]\n            [sci.impl.types :refer [->Node]]\n            [sci.impl.utils :as utils :refer [strip-core-ns\n                                              ana-macros]]))\n\n(defn throw-error-with-location [msg node]\n  (utils/throw-error-with-location msg node {:phase \"analysis\"}))\n\n(defn mark-resolve-sym\n  [sym idx]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m\n            :sci.impl/op :resolve-sym\n            :sci.impl/idx idx))))\n\n(defn check-permission! [ctx sym [check-sym  v]]\n  (or (identical? utils/allowed-loop sym)\n      (identical? utils/allowed-recur sym)\n      (let [check-sym (strip-core-ns check-sym)\n            allow (:allow ctx)]\n        (when-not (if allow (or (and (utils/var? v) (not (:sci/built-in (meta v))))\n                                (contains? allow check-sym))\n                      true)\n          (throw-error-with-location (str sym \" is not allowed!\") sym))\n        (let [deny (:deny ctx)]\n          (when (if deny (contains? deny check-sym)\n                    false)\n            (throw-error-with-location (str sym \" is not allowed!\") sym))))))\n\n(defn lookup*\n  ([ctx sym call?] (lookup* ctx sym call? false))\n  ([ctx sym call? only-var?]\n   (let [sym-ns (some-> (namespace sym) symbol)\n         sym-name (symbol (name sym))\n         env (faster/get-2 ctx :env)\n         env @env\n         cnn (utils/current-ns-name)\n         the-current-ns (-> env :namespaces cnn)\n         ;; resolve alias\n         sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                 sym-ns))\n         sym-ns (get (:ns-aliases env) sym-ns sym-ns)]\n     (if sym-ns\n       (or\n        (when\n            #?(:clj (= sym-ns 'clojure.core)\n               :cljs (or (= sym-ns 'clojure.core)\n                         (= sym-ns 'cljs.core)))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get ana-macros sym-name))]\n                [sym v])))\n        (or (some-> env :namespaces (get sym-ns) (find sym-name))\n            (when-not only-var?\n              (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                [sym (if call?\n                       (with-meta\n                         [clazz #?(:clj sym-name\n                                   :cljs (.split (str sym-name) \".\"))]\n                         {:sci.impl.analyzer/static-access true})\n                       (let [stack (assoc (meta sym)\n                                          :file @utils/current-file\n                                          :ns @utils/current-ns)]\n                         #?(:clj\n                            (->Node\n                             (interop/get-static-field clazz sym-name)\n                             stack)\n                            :cljs\n                            (let [path (.split (str sym-name) \".\")\n                                  len (alength path)]\n                              (if (== 1 len)\n                                (->Node\n                                 (interop/get-static-field clazz sym-name)\n                                 stack)\n                                (->Node\n                                 (interop/get-static-fields clazz path)\n                                 stack))\n                              ))))]))))\n       ;; no sym-ns\n       (or\n        ;; prioritize refers over vars in the current namespace, see 527\n        (when-let [refers (:refers the-current-ns)]\n          (find refers sym-name))\n        (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (let [kv (some-> env :namespaces (get 'clojure.core) (find sym-name))]\n          ;; only valid when the symbol isn't excluded\n          (when-not (some-> the-current-ns\n                            :refer\n                            (get 'clojure.core)\n                            :exclude\n                            (contains? sym-name))\n            kv))\n        (when (when call? (get ana-macros sym))\n          [sym sym])\n        (when-not only-var?\n          (or\n           (when-let [c (interop/resolve-class ctx sym)]\n             [sym c])\n           ;; resolves record or protocol referenced as class\n           ;; e.g. clojure.lang.IDeref which is really a var in clojure.lang/IDeref\n           #?(:clj\n              (when-let [x (records/resolve-record-or-protocol-class ctx sym)]\n                [sym x])\n              :cljs\n              (when-not (:dotted-access ctx)\n                (when-let [x (records/resolve-record-or-protocol-class ctx sym)]\n                  [sym x]))))))))))\n\n(defn update-parents\n  \":syms = closed over -> idx\"\n  [ctx closure-bindings ob]\n  (let [parents (:parents ctx)\n        new-cb (vswap! closure-bindings\n                       (fn [cb]\n                         (first\n                          (reduce\n                           (fn [[acc path] _idx]\n                             (let [new-acc\n                                   (update-in\n                                    acc path\n                                    (fn [entry]\n                                      (let [iden->invoke-idx (or (:syms entry)\n                                                                 {})\n                                            added-before? (contains? iden->invoke-idx ob)]\n                                        (if added-before?\n                                          entry\n                                          (assoc entry :syms\n                                                 (assoc iden->invoke-idx\n                                                        ob (count iden->invoke-idx)))))))\n                                   new-res [new-acc\n                                            (-> path pop pop)]]\n                               (if (= acc new-acc)\n                                 (reduced new-res)\n                                 new-res)))\n                           [cb\n                            parents]\n                           (range (/ (count parents) 2))))))\n        closure-idx (get-in new-cb (conj parents :syms ob))]\n    closure-idx))\n\n(defn lookup\n  ([ctx sym call?] (lookup ctx sym call? nil))\n  ([ctx sym call? #?(:clj tag :cljs _tag)]\n   (let [bindings (faster/get-2 ctx :bindings)\n         track-mutable? (faster/get-2 ctx :deftype-fields)]\n     (or\n      (when-let [[k v]\n                 (find bindings sym)]\n        (let [idx (or (get (:iden->invoke-idx ctx) v)\n                      (let [oi (:outer-idens ctx)\n                            ob (oi v)]\n                        (update-parents ctx (:closure-bindings ctx) ob)))\n              #?@(:clj [tag (or tag\n                                (some-> k meta :tag))])\n              mutable? (when track-mutable?\n                         (when-let [m (some-> k meta)]\n                           #?(:clj (or (:volatile-mutable m)\n                                       (:unsynchronized-mutable m))\n                              :cljs (or (:mutable m)\n                                        (:volatile-mutable m)))))\n              v (if call? ;; resolve-symbol is already handled in the call case\n                  (mark-resolve-sym k idx)\n                  (let [v (cond-> (if mutable?\n                                    (let [ext-map (second (lookup ctx '__sci_this false))]\n                                      (->Node\n                                       (let [this (sci.impl.types/eval ext-map ctx bindings)\n                                             inner (sci.impl.types/getVal this)]\n                                         (get inner sym))\n                                       nil))\n                                    (->Node\n                                     (aget ^objects bindings idx)\n                                     nil))\n                            #?@(:clj [tag (with-meta\n                                            {:tag tag})])\n                            mutable? (vary-meta assoc :mutable true))]\n                    v))]\n          [k v]))\n      (when-let [kv (lookup* ctx sym call?)]\n        (when (:check-permissions ctx)\n          (check-permission! ctx sym kv))\n        kv)))))\n\n;; workaround for evaluator also needing this function\n(vreset! utils/lookup lookup)\n\n(defn resolve-symbol*\n  [ctx sym call? tag]\n  (or\n   (lookup ctx sym call? tag)\n   (let [n (name sym)]\n     (cond\n       ;; NOTE: move this to analyzer when resolve-symbol returns nil?\n       (and call?\n            (str/starts-with? n \".\")\n            (> (count n) 1))\n       [sym 'expand-dot*] ;; method invocation\n       (and call?\n            (str/ends-with? n \".\")\n            (> (count n) 1))\n       [sym 'expand-constructor]))))\n\n#?(:cljs\n   (defn resolve-prefix+path\n     [ctx sym tag]\n     (let [sym-ns (namespace sym)\n           sym-name (name sym)\n           segments (.split sym-name \".\")\n           ctx (assoc ctx :dotted-access true)]\n       (loop [prefix nil\n              segments segments]\n         (when-not (empty? segments)\n           (let [fst-segment (first segments)\n                 nxt-segments (next segments)\n                 new-sym (symbol sym-ns (str prefix\n                                             (when prefix \".\") fst-segment))\n\n                 new-sym-2 (when (and (not sym-ns)\n                                      prefix)\n                             (symbol prefix\n                                     fst-segment))]\n             (if-let [v (resolve-symbol* ctx new-sym false tag)]\n               [(second v) nxt-segments]\n               (if-let [v2 (when new-sym-2\n                             (resolve-symbol* ctx new-sym-2 false tag))]\n                 [(second v2) nxt-segments]\n                 (recur (str new-sym) nxt-segments)))))))))\n\n#?(:cljs (defn resolve-dotted-access [ctx sym call? tag]\n           #?(:cljs\n              (when-let [[v segments] (resolve-prefix+path ctx sym tag)]\n                (let [v (if (utils/var? v) (deref v) v)\n                      segments (into-array segments)]\n                  ;; NOTE: there is a reloading implication here...\n                  (if call?\n                    [sym (with-meta\n                           [v segments]\n                           {:sci.impl.analyzer/static-access true})]\n                    (if (instance? sci.impl.types/NodeR v)\n                      [sym\n                       (sci.impl.types/->Node\n                        (interop/get-static-fields\n                         (sci.impl.types/eval v ctx bindings)\n                         segments)\n                        sym)]\n                      ;; This is x.a.b.c\n                      [sym (interop/get-static-fields v segments)\n                       ;; This would be the correct implementation if v would be mutated, but can be implemented as:\n                       ;; (.. x -a -b c)\n                       #_(sci.impl.types/->Node\n                            (interop/get-static-fields v segments)\n                            nil)])))))))\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false nil))\n  ([ctx sym call?] (resolve-symbol ctx sym call? nil))\n  ([ctx sym call? tag]\n   (second\n    (or (resolve-symbol* ctx sym call? tag)\n        #?(:cljs (let [resolved (resolve-dotted-access ctx sym call? tag)]\n                   resolved))\n        (throw-error-with-location\n         (str \"Could not resolve symbol: \" (str sym))\n         sym)))))\n"]}