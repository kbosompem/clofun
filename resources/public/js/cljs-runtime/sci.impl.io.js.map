{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["var_args","G__42179","sci.impl.io/core-dynamic-var","js/Error","name","sci.impl.io.core_dynamic_var","init-val","sci.impl.utils.dynamic_var","sci.impl.utils/clojure-core-ns","extra-meta","cljs.core.assoc","sci.impl.io/in","*unrestricted*-orig-val__42188","*unrestricted*-temp-val__42189","sci.impl.unrestrict/*unrestricted*","G__42190","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__42193","*unrestricted*-temp-val__42195","G__42196","sci.impl.io/err","*unrestricted*-orig-val__42197","*unrestricted*-temp-val__42198","G__42199","sci.impl.io/print-fn","*unrestricted*-orig-val__42200","*unrestricted*-temp-val__42201","G__42202","sci.impl.io/print-err-fn","*unrestricted*-orig-val__42204","*unrestricted*-temp-val__42205","G__42206","sci.impl.io/print-meta","sci.lang/Var","cljs.core/*print-meta*","sci.impl.io/print-length","cljs.core/*print-length*","sci.impl.io/print-level","cljs.core/*print-level*","sci.impl.io/print-namespace-maps","sci.impl.io/flush-on-newline","cljs.core/*flush-on-newline*","sci.impl.io/print-readably","cljs.core/*print-readably*","sci.impl.io/print-dup-var","cljs.core/*print-dup*","sci.impl.io/print-newline","cljs.core/*print-newline*","sci.impl.io/string-print","x","*print-fn*-orig-val__42212","*print-fn*-temp-val__42213","cljs.core/deref","cljs.core/*print-fn*","cljs.core/string-print","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq42214","self__5755__auto__","cljs.core/seq","objs","*print-fn*-orig-val__42215","*print-length*-orig-val__42216","*print-level*-orig-val__42217","*print-meta*-orig-val__42218","*print-namespace-maps*-orig-val__42219","*print-readably*-orig-val__42220","*print-newline*-orig-val__42221","*print-dup*-orig-val__42222","*print-fn*-temp-val__42223","*print-length*-temp-val__42224","*print-level*-temp-val__42225","*print-meta*-temp-val__42226","*print-namespace-maps*-temp-val__42227","*print-readably*-temp-val__42228","*print-newline*-temp-val__42229","*print-dup*-temp-val__42230","cljs.core/*print-namespace-maps*","cljs.core.apply","cljs.core/pr","sci.impl.io/flush","sci.impl.io/newline","*print-fn*-orig-val__42231","*print-fn*-temp-val__42232","cljs.core.newline","sci.impl.io/pr-str","seq42233","*print-length*-orig-val__42234","*print-level*-orig-val__42235","*print-meta*-orig-val__42236","*print-namespace-maps*-orig-val__42237","*print-readably*-orig-val__42238","*print-newline*-orig-val__42239","*print-dup*-orig-val__42240","*print-length*-temp-val__42241","*print-level*-temp-val__42242","*print-meta*-temp-val__42243","*print-namespace-maps*-temp-val__42244","*print-readably*-temp-val__42245","*print-newline*-temp-val__42246","*print-dup*-temp-val__42247","cljs.core/pr-str","sci.impl.io/prn","seq42251","*print-fn*-orig-val__42254","*print-length*-orig-val__42255","*print-level*-orig-val__42256","*print-meta*-orig-val__42257","*print-namespace-maps*-orig-val__42258","*print-readably*-orig-val__42259","*print-newline*-orig-val__42260","*print-dup*-orig-val__42261","*print-fn*-temp-val__42262","*print-length*-temp-val__42263","*print-level*-temp-val__42264","*print-meta*-temp-val__42265","*print-namespace-maps*-temp-val__42266","*print-readably*-temp-val__42267","*print-newline*-temp-val__42268","*print-dup*-temp-val__42269","cljs.core/prn","sci.impl.io/prn-str","seq42272","*print-length*-orig-val__42276","*print-level*-orig-val__42277","*print-meta*-orig-val__42278","*print-namespace-maps*-orig-val__42279","*print-readably*-orig-val__42280","*print-newline*-orig-val__42281","*print-dup*-orig-val__42282","*print-length*-temp-val__42283","*print-level*-temp-val__42284","*print-meta*-temp-val__42285","*print-namespace-maps*-temp-val__42286","*print-readably*-temp-val__42287","*print-newline*-temp-val__42288","*print-dup*-temp-val__42289","cljs.core/prn-str","sci.impl.io/print","seq42292","*print-fn*-orig-val__42385","*print-length*-orig-val__42386","*print-level*-orig-val__42387","*print-namespace-maps*-orig-val__42388","*print-readably*-orig-val__42389","*print-newline*-orig-val__42390","*print-dup*-orig-val__42391","*print-fn*-temp-val__42392","*print-length*-temp-val__42393","*print-level*-temp-val__42394","*print-namespace-maps*-temp-val__42395","*print-readably*-temp-val__42396","*print-newline*-temp-val__42397","*print-dup*-temp-val__42398","cljs.core/print","sci.impl.io/print-str","seq42510","*print-length*-orig-val__42512","*print-level*-orig-val__42513","*print-meta*-orig-val__42514","*print-namespace-maps*-orig-val__42515","*print-readably*-orig-val__42516","*print-newline*-orig-val__42517","*print-dup*-orig-val__42518","*print-length*-temp-val__42519","*print-level*-temp-val__42520","*print-meta*-temp-val__42521","*print-namespace-maps*-temp-val__42522","*print-readably*-temp-val__42523","*print-newline*-temp-val__42524","*print-dup*-temp-val__42525","cljs.core/print-str","sci.impl.io/println","seq42526","*print-fn*-orig-val__42527","*print-length*-orig-val__42528","*print-level*-orig-val__42529","*print-meta*-orig-val__42530","*print-namespace-maps*-orig-val__42531","*print-readably*-orig-val__42532","*print-newline*-orig-val__42533","*print-dup*-orig-val__42534","*print-fn*-temp-val__42535","*print-length*-temp-val__42536","*print-level*-temp-val__42537","*print-meta*-temp-val__42538","*print-namespace-maps*-temp-val__42539","*print-readably*-temp-val__42540","*print-newline*-temp-val__42541","*print-dup*-temp-val__42542","cljs.core/println","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq42545","G__42546","cljs.core/first","cljs.core/next","G__42547","self__5754__auto__","_","body","sci.impl.utils/allowed-append"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.copy-vars :refer [copy-var]]\n   [sci.impl.records]\n   [sci.impl.unrestrict :refer [*unrestricted*]]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn core-dynamic-var\n  \"create a dynamic var with clojure.core :ns meta\"\n  ([name] (core-dynamic-var name nil))\n  ([name init-val] (utils/dynamic-var name init-val {:ns utils/clojure-core-ns\n                                                     :sci/built-in true}))\n  ([name init-val extra-meta] (utils/dynamic-var name init-val\n                                                 (assoc extra-meta :ns utils/clojure-core-ns\n                                                        :sci/built-in true))))\n\n(def in (binding [*unrestricted* true]\n          (doto (core-dynamic-var '*in*)\n            (vars/unbind)\n            #?(:clj (alter-meta! assoc\n                                 :doc \"A java.io.Reader object representing standard input for read operations.\")))))\n\n(def out (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*out*)\n             (vars/unbind)\n             #?(:clj (alter-meta! assoc :doc \"A java.io.Writer object representing standard output for print operations.\")))))\n\n(def err (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*err*)\n             (vars/unbind)\n             #?(:clj (alter-meta! assoc :doc \" A java.io.Writer object representing standard error for print operations.\")))))\n\n#?(:cljs\n   (def print-fn\n     (binding [*unrestricted* true]\n       (doto (core-dynamic-var '*print-fn*)\n         (vars/unbind)))))\n\n#?(:cljs\n   (def print-err-fn\n     (binding [*unrestricted* true]\n       (doto (core-dynamic-var '*print-err-fn*)\n         (vars/unbind)))))\n\n;; TODO: CLJS print-fn-bodies\n\n(def print-meta (copy-var *print-meta* utils/clojure-core-ns {:dynamic true}))\n(def print-length (copy-var *print-length* utils/clojure-core-ns {:dynamic true}))\n(def print-level (copy-var *print-level* utils/clojure-core-ns {:dynamic true}))\n(def print-namespace-maps (copy-var *print-namespace-maps* utils/clojure-core-ns {:dynamic true :init true}))\n(def flush-on-newline (copy-var *flush-on-newline* utils/clojure-core-ns {:dynamic true}))\n(def print-readably (copy-var *print-readably* utils/clojure-core-ns {:dynamic true}))\n(def print-dup-var (copy-var *print-dup* utils/clojure-core-ns {:dynamic true}))\n#?(:cljs (def print-newline (copy-var *print-newline* utils/clojure-core-ns {:dynamic true})))\n\n#?(:cljs (defn string-print [x]\n           (binding [*print-fn* @print-fn]\n             (cljs.core/string-print x))) )\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably\n                     *print-dup* @print-dup-var]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-fn* @print-fn\n                     *print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably\n                     *print-newline* @print-newline\n                     *print-dup* @print-dup-var]\n             (apply cljs.core/pr objs))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (binding [*print-fn* @print-fn]\n             (cljs.core/newline))))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when @flush-on-newline\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/prn objs))))\n\n#?(:clj\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* nil\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/print objs))))\n\n#?(:clj\n   (defn print-str\n     \"print to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"print to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/println objs))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                   :cljs goog.string.StringBuffer))]\n     #?(:clj\n        (binding [*out* s#]\n          ~@body\n          (str s#))\n        :cljs\n        (binding [*print-newline* true\n                  *print-fn* (fn [x#]\n                               (. s# ~utils/allowed-append x#))]\n          ~@body\n          (str s#)))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}