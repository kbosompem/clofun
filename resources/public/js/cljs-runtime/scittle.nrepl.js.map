{"version":3,"sources":["scittle/nrepl.cljs"],"mappings":"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","names":["scittle.nrepl/nrepl-websocket","js/window","p__46670","p__46671","map__46672","cljs.core/--destructure-map","cljs.core.get","map__46673","scittle.nrepl/nrepl-reply","id","session","ns","payload","or__5045__auto__","cljs.core/deref","scittle.core/!last-ns","cljs.core.assoc","cljs.core.dissoc","p__46674","map__46675","scittle.nrepl/handle-nrepl-eval","code","msg","vec__46676","cljs.core.nth","kind","val","e46679","scittle.core/eval-string","e","G__46680","cljs.core/Keyword","js/Error","cljs.core.pr_str","scittle.nrepl/handle-nrepl-info","info","sci.nrepl.info/info","sci.ctx-store/get-ctx","scittle.nrepl/handle-describe","cljs.core/zipmap","cljs.core.map","cljs.core/name","cljs.core.concat","cljs.core/keys","scittle.nrepl/ops","cljs.core.repeat","completions","sci.nrepl.completions/completions","scittle.nrepl/handle-nrepl-message","temp__5802__auto__","handler","G__46683","cljs.core.merge","scittle.nrepl/ws-url","host","port","path","temp__5804__auto__","ws-port","js/WebSocket","ws","cljs.core.prn","event","clojure.edn.read_string","js/console.log"],"sourcesContent":["(ns scittle.nrepl\n  (:require\n   [clojure.edn :as edn]\n   [sci.ctx-store :as store]\n   [sci.nrepl.completions :refer [completions]]\n   [sci.nrepl.info :refer [info]]\n   [scittle.core :refer [!last-ns eval-string]]))\n\n(defn nrepl-websocket []\n  (.-ws_nrepl js/window))\n\n(defn nrepl-reply [{:keys [id session]} {:keys [ns] :as payload}]\n  (.send (nrepl-websocket)\n         (str\n          (let [ns (or ns (str @!last-ns))]\n            (-> (assoc payload :id id :session session :ns ns)\n                (dissoc :ctx))))))\n\n(defn handle-nrepl-eval [{:keys [code] :as msg}]\n  (let [[kind val] (try [::success (eval-string code)]\n                        (catch :default e\n                          [::error (str e)]))]\n    (case kind\n      ::success\n      (do (nrepl-reply msg {:value (pr-str val)})\n          (nrepl-reply msg {:status [\"done\"]}))\n      ::error\n      (do\n        (nrepl-reply msg {:err (pr-str val)})\n        (nrepl-reply msg {:ex (pr-str val)\n                          :status [\"error\" \"done\"]})))))\n\n(defn handle-nrepl-info [msg]\n  (let [info (info (assoc msg :ctx (store/get-ctx)))]\n    (nrepl-reply msg info)))\n\n(declare ops)\n\n(defn\n  handle-describe\n  [msg]\n  (nrepl-reply\n   msg\n   {:versions {\"scittle-nrepl\" {\"major\" \"0\"\n                                \"minor\" \"0\"\n                                \"incremental\" \"1\"}}\n    :ops (zipmap\n          (map\n           name\n           (concat\n            (keys ops)\n            ;; sci.nrepl browser_server.clj handles:\n            #{:clone :load-file}\n            ;; we are lying about close?\n            #{\"close\"}))\n          (repeat {}))\n    :status [\"done\"]}))\n\n(def ops\n  \"Operations supported by the nrepl server.\"\n  {:eval handle-nrepl-eval\n   :info handle-nrepl-info\n   :eldoc handle-nrepl-info\n   :lookup handle-nrepl-info\n   :describe handle-describe\n   :complete (fn [msg] (let [completions (completions (assoc msg :ctx (store/get-ctx)))]\n                         (nrepl-reply msg completions)))})\n\n(defn handle-nrepl-message [msg]\n  (if-let [handler (ops (:op msg))]\n    (handler msg)\n    (nrepl-reply msg (merge msg {:status [\"error\" \"done\"] :err \"unkown-op\"}))))\n\n(defn ws-url [host port path]\n  (str \"ws://\" host \":\" port \"/\" path))\n\n(when-let [ws-port (.-SCITTLE_NREPL_WEBSOCKET_PORT js/window)]\n  (set! (.-ws_nrepl js/window)\n        (new js/WebSocket (ws-url (.-hostname (.-location js/window)) ws-port \"_nrepl\"))))\n\n(when-let [ws (nrepl-websocket)]\n  (prn :ws ws)\n  (set! (.-onmessage ws)\n        (fn [event]\n          (handle-nrepl-message (edn/read-string (.-data event)))))\n  (set! (.-onerror ws)\n        (fn [event]\n          (js/console.log event))))\n"]}